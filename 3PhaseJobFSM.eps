%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 3PhaseJobFSM.pdf
%%Creator: Adobe Acrobat 11.0.15
%%For: YJQ
%%CreationDate: 4/18/2016, 9:53:06 AM
%%BoundingBox: 0 0 652 602
%%HiResBoundingBox: 0 0 652 602
%%CropBox: 0 0 652 602
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 397 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="Google"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -602 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 602 li
652 602 li
652 0 li
cp
clp
gsave
0 602 mo
652 602 li
652 0 li
0 0 li
0 602 li
clp
gsave
0 0 mo
652.957 0 li
652.957 602.077 li
0 602.077 li
0 0 li
clp
652 602 mo
0 602 li
0 0 li
652 0 li
652 602 li
407.778 509.895 mo
407.778 589.386 li
539.093 589.386 li
539.093 535.969 li
648.52 535.969 li
648.52 506.017 li
539.093 506.017 li
539.093 505.991 li
540.711 505.991 li
540.711 505.616 li
542.961 505.616 li
542.961 505.991 li
545.961 505.991 li
545.961 505.616 li
548.211 505.616 li
548.211 505.991 li
551.211 505.991 li
551.211 505.616 li
553.461 505.616 li
553.461 505.991 li
556.461 505.991 li
556.461 505.616 li
558.711 505.616 li
558.711 505.991 li
561.711 505.991 li
561.711 505.616 li
563.961 505.616 li
563.961 505.991 li
566.96 505.991 li
566.96 505.616 li
569.211 505.616 li
569.211 505.991 li
572.211 505.991 li
572.211 505.616 li
574.461 505.616 li
574.461 505.991 li
577.461 505.991 li
577.461 505.616 li
579.711 505.616 li
579.711 505.991 li
582.711 505.991 li
582.711 505.616 li
584.961 505.616 li
584.961 505.991 li
587.961 505.991 li
587.961 505.616 li
590.211 505.616 li
590.211 505.991 li
593.211 505.991 li
593.211 505.616 li
595.461 505.616 li
595.461 505.991 li
598.461 505.991 li
598.461 505.616 li
600.711 505.616 li
600.711 505.991 li
603.711 505.991 li
603.711 505.616 li
605.961 505.616 li
605.961 505.991 li
608.961 505.991 li
608.961 505.616 li
611.21 505.616 li
611.21 505.991 li
614.21 505.991 li
614.21 505.616 li
616.461 505.616 li
616.461 505.991 li
619.461 505.991 li
619.461 505.616 li
621.711 505.616 li
621.711 505.991 li
624.711 505.991 li
624.711 505.616 li
626.961 505.616 li
626.961 505.991 li
629.961 505.991 li
629.961 505.616 li
632.211 505.616 li
632.211 505.991 li
635.211 505.991 li
635.211 505.616 li
637.461 505.616 li
637.461 505.991 li
640.461 505.991 li
640.461 505.616 li
642.711 505.616 li
642.711 505.991 li
645.711 505.991 li
645.711 505.616 li
647.514 505.616 li
647.514 505.169 li
647.889 505.169 li
647.889 502.169 li
647.514 502.169 li
647.514 499.919 li
647.889 499.919 li
647.889 496.919 li
647.514 496.919 li
647.514 494.669 li
647.889 494.669 li
647.889 491.669 li
647.514 491.669 li
647.514 489.419 li
647.889 489.419 li
647.889 486.419 li
647.514 486.419 li
647.514 484.169 li
647.889 484.169 li
647.889 481.169 li
647.514 481.169 li
647.514 478.919 li
647.889 478.919 li
647.889 475.919 li
647.514 475.919 li
647.514 473.669 li
647.889 473.669 li
647.889 470.669 li
647.514 470.669 li
647.514 468.419 li
647.889 468.419 li
647.889 465.419 li
647.514 465.419 li
647.514 463.169 li
647.889 463.169 li
647.889 460.169 li
647.514 460.169 li
647.514 457.919 li
647.889 457.919 li
647.889 454.919 li
647.514 454.919 li
647.514 452.669 li
647.889 452.669 li
647.889 449.669 li
647.514 449.669 li
647.514 447.419 li
647.889 447.419 li
647.889 444.419 li
647.514 444.419 li
647.514 442.169 li
647.889 442.169 li
647.889 439.169 li
647.514 439.169 li
647.514 436.919 li
647.889 436.919 li
647.889 433.919 li
647.514 433.919 li
647.514 431.669 li
647.889 431.669 li
647.889 428.669 li
647.514 428.669 li
647.514 426.419 li
647.889 426.419 li
647.889 423.419 li
647.514 423.419 li
647.514 421.169 li
647.889 421.169 li
647.889 418.169 li
647.514 418.169 li
647.514 415.919 li
647.889 415.919 li
647.889 412.919 li
647.514 412.919 li
647.514 410.669 li
647.889 410.669 li
647.889 407.669 li
647.514 407.669 li
647.514 405.419 li
647.889 405.419 li
647.889 402.419 li
647.514 402.419 li
647.514 400.169 li
647.889 400.169 li
647.889 397.169 li
647.514 397.169 li
647.514 394.919 li
647.889 394.919 li
647.889 391.919 li
647.514 391.919 li
647.514 389.669 li
647.889 389.669 li
647.889 386.669 li
647.514 386.669 li
647.514 384.419 li
647.889 384.419 li
647.889 381.419 li
647.514 381.419 li
647.514 379.169 li
647.889 379.169 li
647.889 376.169 li
647.514 376.169 li
647.514 373.919 li
647.889 373.919 li
647.889 370.919 li
647.514 370.919 li
647.514 368.669 li
647.889 368.669 li
647.889 365.669 li
647.514 365.669 li
647.514 363.419 li
647.889 363.419 li
647.889 360.419 li
647.514 360.419 li
647.514 358.169 li
647.889 358.169 li
647.889 355.169 li
647.514 355.169 li
647.514 352.919 li
647.889 352.919 li
647.889 349.919 li
647.514 349.919 li
647.514 347.669 li
647.889 347.669 li
647.889 344.669 li
647.514 344.669 li
647.514 342.419 li
647.889 342.419 li
647.889 339.419 li
647.514 339.419 li
647.514 337.546 li
647.247 337.279 li
647.512 337.014 li
645.391 334.893 li
645.126 335.158 li
643.535 333.567 li
643.8 333.302 li
641.679 331.181 li
641.414 331.446 li
639.823 329.855 li
640.088 329.59 li
637.966 327.468 li
637.701 327.733 li
636.11 326.142 li
636.375 325.877 li
634.254 323.756 li
633.989 324.021 li
632.398 322.43 li
632.663 322.165 li
630.542 320.044 li
630.277 320.309 li
628.686 318.718 li
628.951 318.453 li
626.829 316.331 li
626.564 316.597 li
624.973 315.006 li
625.239 314.74 li
623.117 312.619 li
622.852 312.884 li
621.261 311.293 li
621.526 311.028 li
619.405 308.907 li
619.14 309.172 li
617.549 307.581 li
617.814 307.316 li
615.693 305.195 li
615.427 305.46 li
613.899 303.931 li
613.811 303.931 li
613.811 303.556 li
610.811 303.556 li
610.811 303.931 li
608.561 303.931 li
608.561 303.556 li
605.561 303.556 li
605.561 303.931 li
603.311 303.931 li
603.311 303.556 li
600.311 303.556 li
600.311 303.931 li
598.061 303.931 li
598.061 303.556 li
595.061 303.556 li
595.061 303.931 li
592.811 303.931 li
592.811 303.556 li
589.811 303.556 li
589.811 303.931 li
587.561 303.931 li
587.561 303.556 li
584.561 303.556 li
584.561 303.931 li
582.311 303.931 li
582.311 303.556 li
579.311 303.556 li
579.311 303.931 li
577.061 303.931 li
577.061 303.556 li
574.061 303.556 li
574.061 303.931 li
571.811 303.931 li
571.811 303.556 li
568.811 303.556 li
568.811 303.931 li
566.561 303.931 li
566.561 303.556 li
563.561 303.556 li
563.561 303.931 li
561.311 303.931 li
561.311 303.556 li
558.311 303.556 li
558.311 303.931 li
557.224 303.931 li
557.224 239.992 li
546.163 239.992 li
546.163 228.163 li
594.706 228.163 li
598.462 228.163 601.506 225.119 601.507 221.363 cv
601.507 195.663 li
601.507 193.859 600.79 192.129 599.515 190.854 cv
598.24 189.579 596.51 188.862 594.706 188.862 cv
497.62 188.862 li
493.864 188.862 490.82 191.907 490.82 195.663 cv
490.82 195.663 li
490.82 208.37 li
379.92 162.79 li
380.704 162.79 li
380.704 162.415 li
382.954 162.415 li
382.954 162.79 li
385.954 162.79 li
385.954 162.415 li
388.204 162.415 li
388.204 162.79 li
391.204 162.79 li
391.204 162.415 li
393.454 162.415 li
393.454 162.79 li
396.454 162.79 li
396.454 162.415 li
398.704 162.415 li
398.704 162.79 li
401.704 162.79 li
401.704 162.415 li
403.954 162.415 li
403.954 162.79 li
406.954 162.79 li
406.954 162.415 li
409.204 162.415 li
409.204 162.79 li
412.204 162.79 li
412.204 162.415 li
414.454 162.415 li
414.454 162.79 li
417.454 162.79 li
417.454 162.415 li
417.969 162.415 li
417.969 160.68 li
418.343 160.68 li
418.343 157.68 li
417.969 157.68 li
417.969 155.43 li
418.343 155.43 li
418.343 152.43 li
417.969 152.43 li
417.969 150.18 li
418.343 150.18 li
418.343 147.18 li
417.969 147.18 li
417.969 144.93 li
418.343 144.93 li
418.343 141.93 li
417.969 141.93 li
417.969 139.68 li
418.343 139.68 li
418.343 136.68 li
417.969 136.68 li
417.969 134.43 li
418.343 134.43 li
418.343 131.43 li
417.969 131.43 li
417.969 129.18 li
418.343 129.18 li
418.343 126.18 li
417.969 126.18 li
417.969 123.93 li
418.343 123.93 li
418.343 120.93 li
417.969 120.93 li
417.969 118.68 li
418.343 118.68 li
418.343 115.68 li
417.969 115.68 li
417.969 113.43 li
418.343 113.43 li
418.343 110.43 li
417.969 110.43 li
417.969 108.18 li
418.343 108.18 li
418.343 105.18 li
417.969 105.18 li
417.969 102.93 li
418.343 102.93 li
418.343 99.9297 li
417.969 99.9297 li
417.969 98.2424 li
417.571 97.8445 li
417.836 97.5794 li
415.714 95.458 li
415.449 95.7232 li
413.858 94.1322 li
414.123 93.8671 li
412.002 91.7457 li
411.737 92.0109 li
410.146 90.4199 li
410.411 90.1547 li
408.29 88.0335 li
408.025 88.2986 li
406.434 86.7076 li
406.699 86.4424 li
405.399 85.1424 li
405.329 85.0724 405.232 85.0325 405.134 85.0325 cv
403.972 85.0325 li
403.972 85.4075 li
401.722 85.4075 li
401.722 85.0325 li
398.722 85.0325 li
398.722 85.4075 li
396.472 85.4075 li
396.472 85.0325 li
393.472 85.0325 li
393.472 85.4075 li
391.222 85.4075 li
391.222 85.0325 li
388.222 85.0325 li
388.222 85.4075 li
385.972 85.4075 li
385.972 85.0325 li
382.972 85.0325 li
382.972 85.4075 li
380.722 85.4075 li
380.722 85.0325 li
377.722 85.0325 li
377.722 85.4075 li
375.472 85.4075 li
375.472 85.0325 li
372.472 85.0325 li
372.472 85.4075 li
370.222 85.4075 li
370.222 85.0325 li
367.222 85.0325 li
367.222 85.4075 li
364.972 85.4075 li
364.972 85.0325 li
361.972 85.0325 li
361.972 85.4075 li
359.722 85.4075 li
359.722 85.0325 li
356.722 85.0325 li
356.722 85.4075 li
354.472 85.4075 li
354.472 85.0325 li
351.472 85.0325 li
351.472 85.4075 li
349.222 85.4075 li
349.222 85.0325 li
346.222 85.0325 li
346.222 85.4075 li
343.972 85.4075 li
343.972 85.0325 li
340.972 85.0325 li
340.972 85.4075 li
338.722 85.4075 li
338.722 85.0325 li
335.722 85.0325 li
335.722 85.4075 li
333.472 85.4075 li
333.472 85.0325 li
330.472 85.0325 li
330.472 85.4075 li
328.222 85.4075 li
328.222 85.0325 li
325.222 85.0325 li
325.222 85.4075 li
322.972 85.4075 li
322.972 85.0325 li
319.972 85.0325 li
319.972 85.4075 li
317.722 85.4075 li
317.722 85.0325 li
314.722 85.0325 li
314.722 85.4075 li
312.472 85.4075 li
312.472 85.0325 li
309.472 85.0325 li
309.472 85.4075 li
307.222 85.4075 li
307.222 85.0325 li
304.222 85.0325 li
304.222 85.4075 li
301.972 85.4075 li
301.972 85.0325 li
298.972 85.0325 li
298.972 85.4075 li
296.722 85.4075 li
296.722 85.0325 li
293.722 85.0325 li
293.722 85.4075 li
291.472 85.4075 li
291.472 85.0325 li
288.472 85.0325 li
288.472 85.4075 li
286.222 85.4075 li
286.222 85.0325 li
283.222 85.0325 li
283.222 85.4075 li
280.972 85.4075 li
280.972 85.0325 li
277.972 85.0325 li
277.972 85.4075 li
275.722 85.4075 li
275.722 85.0325 li
272.722 85.0325 li
272.722 85.4075 li
270.472 85.4075 li
270.472 85.0325 li
267.472 85.0325 li
267.472 85.4075 li
265.222 85.4075 li
265.222 85.0325 li
262.222 85.0325 li
262.222 85.4075 li
259.972 85.4075 li
259.972 85.0325 li
256.972 85.0325 li
256.972 85.4075 li
254.722 85.4075 li
254.722 85.0325 li
251.722 85.0325 li
251.722 85.4075 li
249.472 85.4075 li
249.472 85.0325 li
246.472 85.0325 li
246.472 85.4075 li
246.472 86.6287 li
246.097 86.6287 li
246.097 89.6287 li
246.472 89.6287 li
246.472 91.8786 li
246.097 91.8786 li
246.097 94.8786 li
246.472 94.8786 li
246.472 97.1286 li
246.097 97.1286 li
246.097 100.129 li
246.472 100.129 li
246.472 102.379 li
246.097 102.379 li
246.097 105.379 li
246.472 105.379 li
246.472 107.629 li
246.097 107.629 li
246.097 110.629 li
246.472 110.629 li
246.472 112.879 li
246.097 112.879 li
246.097 115.879 li
246.472 115.879 li
246.472 118.129 li
246.097 118.129 li
246.097 121.129 li
246.472 121.129 li
246.472 123.379 li
246.097 123.379 li
246.097 123.91 li
156.645 123.91 li
156.645 111.06 li
156.645 109.257 155.928 107.527 154.653 106.252 cv
153.377 104.976 151.648 104.26 149.844 104.26 cv
101.301 104.26 li
101.301 86.6338 li
102.801 86.6338 li
102.801 60.7913 li
156.27 60.7913 li
156.27 4.90154 li
46.3327 4.90154 li
46.3327 60.7913 li
99.8012 60.7913 li
99.8012 86.6338 li
101.301 86.6338 li
101.301 104.26 li
52.758 104.26 li
49.0021 104.26 45.9578 107.304 45.9577 111.06 cv
45.9577 111.06 li
45.9577 136.761 li
45.9578 140.517 49.0021 143.561 52.758 143.561 cv
149.844 143.561 li
150.245 143.561 150.638 143.526 151.02 143.46 cv
151.02 195.663 li
280.327 195.663 li
280.327 162.79 li
280.954 162.79 li
280.954 162.415 li
283.204 162.415 li
283.204 162.79 li
286.204 162.79 li
286.204 162.415 li
288.454 162.415 li
288.454 162.79 li
291.454 162.79 li
291.454 162.415 li
293.704 162.415 li
293.704 162.79 li
296.704 162.79 li
296.704 162.415 li
298.954 162.415 li
298.954 162.79 li
301.954 162.79 li
301.954 162.415 li
304.204 162.415 li
304.204 162.79 li
307.204 162.79 li
307.204 162.415 li
309.454 162.415 li
309.454 162.79 li
312.454 162.79 li
312.454 162.415 li
314.704 162.415 li
314.704 162.79 li
317.704 162.79 li
317.704 162.415 li
319.954 162.415 li
319.954 162.79 li
322.954 162.79 li
322.954 162.415 li
325.204 162.415 li
325.204 162.79 li
328.204 162.79 li
328.204 162.415 li
330.454 162.415 li
330.454 162.79 li
333.454 162.79 li
333.454 162.415 li
335.704 162.415 li
335.704 162.79 li
338.704 162.79 li
338.704 162.415 li
340.954 162.415 li
340.954 162.79 li
343.954 162.79 li
343.954 162.415 li
346.204 162.415 li
346.204 162.79 li
349.204 162.79 li
349.204 162.415 li
351.454 162.415 li
351.454 162.79 li
354.454 162.79 li
354.454 162.415 li
356.704 162.415 li
356.704 162.79 li
359.704 162.79 li
359.704 162.415 li
361.954 162.415 li
361.954 162.79 li
364.954 162.79 li
364.954 162.415 li
367.204 162.415 li
367.204 162.79 li
370.204 162.79 li
370.204 162.415 li
372.454 162.415 li
372.454 162.79 li
375.454 162.79 li
375.454 162.415 li
377.704 162.415 li
377.704 162.79 li
379.92 162.79 li
490.82 208.37 li
490.82 221.363 li
490.82 225.119 493.864 228.163 497.62 228.163 cv
546.163 228.163 li
546.163 239.992 li
398.248 239.992 li
398.248 311.024 li
437.561 311.024 li
437.561 313.075 li
437.186 313.075 li
437.186 316.075 li
437.561 316.075 li
437.561 318.325 li
437.186 318.325 li
437.186 321.325 li
437.561 321.325 li
437.561 323.575 li
437.186 323.575 li
437.186 326.575 li
437.561 326.575 li
437.561 328.825 li
437.186 328.825 li
437.186 331.825 li
437.561 331.825 li
437.561 334.075 li
437.186 334.075 li
437.186 337.075 li
437.561 337.075 li
437.561 339.325 li
437.186 339.325 li
437.186 342.325 li
437.561 342.325 li
437.561 344.575 li
437.186 344.575 li
437.186 347.575 li
437.561 347.575 li
437.561 349.825 li
437.186 349.825 li
437.186 352.825 li
437.561 352.825 li
437.561 355.075 li
437.186 355.075 li
437.186 358.075 li
437.561 358.075 li
437.561 360.325 li
437.186 360.325 li
437.186 363.325 li
437.561 363.325 li
437.561 365.575 li
437.186 365.575 li
437.186 368.575 li
437.561 368.575 li
437.561 370.825 li
437.186 370.825 li
437.186 373.825 li
437.561 373.825 li
437.561 373.981 li
434.846 373.981 li
434.846 439.32 li
437.186 439.32 li
437.186 442.075 li
437.561 442.075 li
437.561 444.325 li
437.186 444.325 li
437.186 447.325 li
437.561 447.325 li
437.561 449.575 li
437.186 449.575 li
437.186 452.575 li
437.561 452.575 li
437.561 454.825 li
437.186 454.825 li
437.186 457.825 li
437.561 457.825 li
437.561 460.075 li
437.186 460.075 li
437.186 463.075 li
437.561 463.075 li
437.561 465.325 li
437.186 465.325 li
437.186 468.325 li
437.561 468.325 li
437.561 470.575 li
437.186 470.575 li
437.186 472.001 li
437.186 472.1 437.226 472.196 437.296 472.266 cv
438.408 473.379 li
438.674 473.114 li
440.265 474.705 li
439.999 474.97 li
442.121 477.091 li
442.386 476.826 li
443.977 478.417 li
443.712 478.682 li
445.833 480.804 li
446.098 480.538 li
447.689 482.129 li
447.424 482.395 li
449.545 484.516 li
449.811 484.251 li
451.402 485.842 li
451.136 486.107 li
451.848 486.819 li
409.971 505.622 li
407.778 505.622 li
407.778 506.607 li
350.173 532.472 li
347.88 527.365 li
346.344 528.858 li
333.39 541.447 li
333.174 541.447 li
333.62 540.453 li
283.291 517.854 li
283.291 505.622 li
256.051 505.622 li
208.832 484.419 li
208.832 483.956 li
208.457 483.956 li
208.457 481.706 li
208.832 481.706 li
208.832 478.706 li
208.457 478.706 li
208.457 476.456 li
208.832 476.456 li
208.832 473.456 li
208.457 473.456 li
208.457 471.206 li
208.832 471.206 li
208.832 468.206 li
208.457 468.206 li
208.457 465.956 li
208.832 465.956 li
208.832 462.956 li
208.457 462.956 li
208.457 460.706 li
208.832 460.706 li
208.832 457.706 li
208.457 457.706 li
208.457 455.456 li
208.832 455.456 li
208.832 452.456 li
208.457 452.456 li
208.457 450.206 li
208.832 450.206 li
208.832 447.206 li
208.457 447.206 li
208.457 444.956 li
208.832 444.956 li
208.832 441.956 li
208.457 441.956 li
208.457 439.706 li
208.832 439.706 li
208.832 436.706 li
208.457 436.706 li
208.457 434.456 li
208.832 434.456 li
208.832 431.456 li
208.457 431.456 li
208.457 429.206 li
208.832 429.206 li
208.832 426.206 li
208.457 426.206 li
208.457 423.956 li
208.832 423.956 li
208.832 420.956 li
208.457 420.956 li
208.457 418.706 li
208.832 418.706 li
208.832 415.706 li
208.457 415.706 li
208.457 413.456 li
208.832 413.456 li
208.832 410.456 li
208.457 410.456 li
208.457 408.206 li
208.832 408.206 li
208.832 405.206 li
208.457 405.206 li
208.457 402.956 li
208.832 402.956 li
208.832 399.956 li
208.457 399.956 li
208.457 397.706 li
208.832 397.706 li
208.832 394.706 li
208.457 394.706 li
208.457 392.457 li
208.832 392.457 li
208.832 389.457 li
208.457 389.457 li
208.457 387.206 li
208.832 387.206 li
208.832 384.206 li
208.457 384.206 li
208.457 381.956 li
208.832 381.956 li
208.832 378.956 li
208.457 378.956 li
208.457 376.706 li
208.832 376.706 li
208.832 373.706 li
208.457 373.706 li
208.457 371.457 li
208.832 371.457 li
208.832 368.456 li
208.457 368.456 li
208.457 366.206 li
208.832 366.206 li
208.832 363.206 li
208.457 363.206 li
208.457 360.956 li
208.832 360.956 li
208.832 357.956 li
208.457 357.956 li
208.457 355.706 li
208.832 355.706 li
208.832 352.706 li
208.457 352.706 li
208.457 350.457 li
208.832 350.457 li
208.832 347.457 li
208.457 347.457 li
208.457 345.206 li
208.832 345.206 li
208.832 342.502 li
277.662 342.502 li
277.662 355.353 li
277.663 359.109 280.707 362.153 284.463 362.153 cv
381.549 362.153 li
385.305 362.153 388.349 359.109 388.349 355.353 cv
388.349 329.653 li
388.349 327.849 387.633 326.119 386.357 324.844 cv
385.082 323.569 383.353 322.852 381.549 322.852 cv
318.441 322.852 li
318.441 266.495 li
194.142 266.495 li
194.142 322.706 li
193.452 322.016 li
193.186 322.282 li
191.595 320.691 li
191.861 320.425 li
189.739 318.304 li
189.474 318.569 li
187.883 316.978 li
188.148 316.713 li
186.027 314.592 li
185.762 314.857 li
184.171 313.266 li
184.436 313.001 li
182.315 310.88 li
182.05 311.145 li
180.458 309.554 li
180.724 309.288 li
178.602 307.167 li
178.337 307.432 li
176.746 305.841 li
177.011 305.576 li
175.107 303.672 li
175.037 303.602 174.941 303.562 174.842 303.562 cv
174.535 303.562 li
174.535 303.937 li
172.285 303.937 li
172.285 303.562 li
169.285 303.562 li
169.285 303.937 li
167.035 303.937 li
167.035 303.562 li
164.035 303.562 li
164.035 303.937 li
161.785 303.937 li
161.785 303.562 li
158.785 303.562 li
158.785 303.937 li
156.535 303.937 li
156.535 303.562 li
153.535 303.562 li
153.535 303.937 li
151.285 303.937 li
151.285 303.562 li
148.285 303.562 li
148.285 303.937 li
146.035 303.937 li
146.035 303.562 li
143.035 303.562 li
143.035 303.937 li
140.785 303.937 li
140.785 303.562 li
137.785 303.562 li
137.785 303.937 li
135.535 303.937 li
135.535 303.562 li
132.535 303.562 li
132.535 303.937 li
130.285 303.937 li
130.285 303.562 li
127.285 303.562 li
127.285 303.937 li
125.035 303.937 li
125.035 303.562 li
122.035 303.562 li
122.035 303.937 li
119.785 303.937 li
119.785 303.562 li
116.785 303.562 li
116.785 303.937 li
114.535 303.937 li
114.535 303.562 li
111.535 303.562 li
111.535 303.937 li
109.285 303.937 li
109.285 303.562 li
106.285 303.562 li
106.285 303.937 li
104.035 303.937 li
104.035 303.562 li
101.035 303.562 li
101.035 303.937 li
98.7853 303.937 li
98.7853 303.562 li
95.7853 303.562 li
95.7853 303.937 li
93.5354 303.937 li
93.5354 303.562 li
90.5354 303.562 li
90.5354 303.937 li
88.2854 303.937 li
88.2854 303.562 li
85.2854 303.562 li
85.2854 303.937 li
83.0353 303.937 li
83.0353 303.562 li
80.0354 303.562 li
80.0354 303.937 li
77.7853 303.937 li
77.7853 303.562 li
74.7853 303.562 li
74.7853 303.937 li
72.5354 303.937 li
72.5354 303.562 li
69.5354 303.562 li
69.5354 303.937 li
67.2854 303.937 li
67.2854 303.562 li
64.2854 303.562 li
64.2854 303.937 li
62.0354 303.937 li
62.0354 303.562 li
59.0354 303.562 li
59.0354 303.937 li
56.7853 303.937 li
56.7853 303.562 li
53.7853 303.562 li
53.7853 303.937 li
51.5355 303.937 li
51.5355 303.562 li
48.5355 303.562 li
48.5355 303.937 li
46.2854 303.937 li
46.2854 303.562 li
43.2854 303.562 li
43.2854 303.937 li
41.0354 303.937 li
41.0354 303.562 li
38.0354 303.562 li
38.0354 303.937 li
35.7853 303.937 li
35.7853 303.562 li
32.7853 303.562 li
32.7853 303.937 li
30.5355 303.937 li
30.5355 303.562 li
27.5355 303.562 li
27.5355 303.937 li
25.2854 303.937 li
25.2854 303.562 li
22.2854 303.562 li
22.2854 303.937 li
20.0354 303.937 li
20.0354 303.562 li
17.0354 303.562 li
17.0354 303.937 li
14.7854 303.937 li
14.7854 303.562 li
11.7854 303.562 li
11.7854 303.937 li
9.53549 303.937 li
9.53549 303.562 li
6.53549 303.562 li
6.4366 303.562 6.34016 303.602 6.2702 303.672 cv
6.2004 303.742 6.16035 303.838 6.16035 303.937 cv
6.16035 305.268 li
6.53549 305.268 li
6.53549 307.518 li
6.16035 307.518 li
6.16035 310.518 li
6.53549 310.518 li
6.53549 312.768 li
6.16035 312.768 li
6.16035 315.768 li
6.53549 315.768 li
6.53549 318.018 li
6.16035 318.018 li
6.16035 321.018 li
6.53549 321.018 li
6.53549 323.268 li
6.16035 323.268 li
6.16035 326.268 li
6.53549 326.268 li
6.53549 328.518 li
6.16035 328.518 li
6.16035 331.518 li
6.53549 331.518 li
6.53549 333.768 li
6.16035 333.768 li
6.16035 336.768 li
6.53549 336.768 li
6.53549 339.018 li
6.16035 339.018 li
6.16035 342.018 li
6.53549 342.018 li
6.53549 344.268 li
6.16035 344.268 li
6.16035 347.268 li
6.53549 347.268 li
6.53549 349.518 li
6.16035 349.518 li
6.16035 352.518 li
6.53549 352.518 li
6.53549 354.768 li
6.16035 354.768 li
6.16035 357.768 li
6.53549 357.768 li
6.53549 360.018 li
6.16035 360.018 li
6.16035 363.018 li
6.53549 363.018 li
6.53549 365.268 li
6.16035 365.268 li
6.16035 368.268 li
6.53549 368.268 li
6.53549 370.518 li
6.16035 370.518 li
6.16035 373.518 li
6.53549 373.518 li
6.53549 375.768 li
6.16035 375.768 li
6.16035 378.768 li
6.53549 378.768 li
6.53549 381.018 li
6.16035 381.018 li
6.16035 384.018 li
6.53549 384.018 li
6.53549 386.268 li
6.16035 386.268 li
6.16035 389.268 li
6.53549 389.268 li
6.53549 391.518 li
6.16035 391.518 li
6.16035 394.518 li
6.53549 394.518 li
6.53549 396.768 li
6.16035 396.768 li
6.16035 399.768 li
6.53549 399.768 li
6.53549 402.018 li
6.16035 402.018 li
6.16035 405.018 li
6.53549 405.018 li
6.53549 407.268 li
6.16035 407.268 li
6.16035 410.268 li
6.53549 410.268 li
6.53549 412.518 li
6.16035 412.518 li
6.16035 415.518 li
6.53549 415.518 li
6.53549 417.768 li
6.16035 417.768 li
6.16035 420.768 li
6.53549 420.768 li
6.53549 423.018 li
6.16035 423.018 li
6.16035 426.018 li
6.53549 426.018 li
6.53549 428.268 li
6.16035 428.268 li
6.16035 431.268 li
6.53549 431.268 li
6.53549 433.518 li
6.16035 433.518 li
6.16035 436.518 li
6.53549 436.518 li
6.53549 438.768 li
6.16035 438.768 li
6.16035 441.768 li
6.53549 441.768 li
6.53549 444.018 li
6.16035 444.018 li
6.16035 447.018 li
6.53549 447.018 li
6.53549 449.268 li
6.16035 449.268 li
6.16035 452.268 li
6.53549 452.268 li
6.53549 454.518 li
6.16035 454.518 li
6.16035 457.518 li
6.53549 457.518 li
6.53549 459.768 li
6.16035 459.768 li
6.16035 462.768 li
6.53549 462.768 li
6.53549 465.018 li
6.16035 465.018 li
6.16035 468.018 li
6.53549 468.018 li
6.53549 470.268 li
6.16035 470.268 li
6.16035 472.007 li
6.16035 472.106 6.2004 472.202 6.2702 472.272 cv
7.16171 473.164 li
7.42689 472.899 li
9.01785 474.49 li
8.75268 474.755 li
10.8741 476.876 li
11.1392 476.611 li
12.7302 478.202 li
12.465 478.467 li
14.5864 480.588 li
14.8515 480.323 li
16.4425 481.914 li
16.1774 482.179 li
18.2986 484.301 li
18.5638 484.035 li
20.1548 485.626 li
19.8898 485.892 li
22.011 488.013 li
22.2761 487.748 li
23.8671 489.339 li
23.602 489.604 li
25.7233 491.725 li
25.9884 491.46 li
27.5794 493.051 li
27.3143 493.316 li
29.4355 495.438 li
29.7007 495.172 li
31.2917 496.763 li
31.0267 497.028 li
33.1479 499.15 li
33.413 498.885 li
35.004 500.476 li
34.7389 500.741 li
36.8603 502.862 li
37.1254 502.597 li
38.7163 504.188 li
38.4512 504.453 li
39.8851 505.887 li
39.9559 505.958 40.05 505.997 40.1502 505.997 cv
41.1225 505.997 li
41.1225 505.622 li
43.3724 505.622 li
43.3724 505.997 li
46.3724 505.997 li
46.3724 505.622 li
48.6224 505.622 li
48.6224 505.997 li
51.6224 505.997 li
51.6224 505.622 li
53.8725 505.622 li
53.8725 505.997 li
56.8725 505.997 li
56.8725 505.622 li
59.1223 505.622 li
59.1223 505.997 li
62.1223 505.997 li
62.1223 505.622 li
64.3724 505.622 li
64.3724 505.997 li
67.3724 505.997 li
67.3724 505.622 li
69.6224 505.622 li
69.6224 505.997 li
72.6224 505.997 li
72.6224 505.622 li
74.8723 505.622 li
74.8723 505.997 li
77.8724 505.997 li
77.8724 505.622 li
80.1223 505.622 li
80.1223 505.997 li
83.1223 505.997 li
83.1223 505.622 li
85.3724 505.622 li
85.3724 505.997 li
88.3723 505.997 li
88.3723 505.622 li
90.6224 505.622 li
90.6224 505.997 li
93.6224 505.997 li
93.6224 505.622 li
95.8723 505.622 li
95.8723 505.997 li
98.8723 505.997 li
98.8723 505.622 li
101.122 505.622 li
101.122 505.997 li
104.122 505.997 li
104.122 505.622 li
106.372 505.622 li
106.372 505.997 li
109.372 505.997 li
109.372 505.622 li
111.622 505.622 li
111.622 505.997 li
114.622 505.997 li
114.622 505.622 li
116.872 505.622 li
116.872 505.997 li
119.872 505.997 li
119.872 505.622 li
122.122 505.622 li
122.122 505.997 li
125.122 505.997 li
125.122 505.622 li
127.372 505.622 li
127.372 505.997 li
130.372 505.997 li
130.372 505.622 li
132.622 505.622 li
132.622 505.997 li
135.622 505.997 li
135.622 505.622 li
137.872 505.622 li
137.872 505.997 li
140.872 505.997 li
140.872 505.622 li
143.122 505.622 li
143.122 505.997 li
146.122 505.997 li
146.122 505.622 li
148.372 505.622 li
148.055 505.622 li
148.055 569.661 li
277.662 569.661 li
277.662 573.948 li
277.663 577.703 280.707 580.748 284.463 580.748 cv
381.549 580.748 li
385.305 580.748 388.349 577.703 388.349 573.948 cv
388.349 548.247 li
388.349 546.443 387.633 544.714 386.357 543.438 cv
385.082 542.163 383.353 541.447 381.549 541.447 cv
338.207 541.447 li
353.694 540.315 li
351.401 535.209 li
407.778 509.895 li
6.53549 269.621 mo
6.53549 299.574 li
149.661 299.574 li
149.661 269.621 li
6.53549 269.621 li
443.492 130.701 mo
443.492 172.795 li
553.429 172.795 li
553.429 130.701 li
443.492 130.701 li
501.354 70.8011 mo
501.354 80.4151 li
501.354 83.3794 503.757 85.782 506.721 85.7823 cv
585.603 85.7823 li
588.567 85.782 590.97 83.3794 590.97 80.4151 cv
590.97 70.4734 li
591.671 70.4562 592.404 70.3909 593.158 70.2816 cv
593.211 70.6514 li
593.429 70.62 li
593.433 70.6193 li
593.761 70.5684 594.092 70.5093 594.426 70.4426 cv
595.761 70.1756 597.137 69.7847 598.5 69.2876 cv
601.227 68.2931 603.904 66.8756 606.096 65.1635 cv
609.067 62.8401 611.18 59.9581 611.187 56.8074 cv
611.188 55.3238 610.707 53.8015 609.65 52.3099 cv
608.002 49.9854 604.994 47.7249 600.965 45.6038 cv
594.478 42.1958 585.325 39.1627 574.932 37.0829 cv
617.726 37.0829 li
617.726 7.13016 li
474.6 7.13016 li
474.6 37.0829 li
517.358 37.0829 li
513.429 37.8691 509.679 38.7912 506.183 39.8178 cv
500.441 41.5044 495.386 43.4721 491.357 45.5883 cv
487.329 47.7069 484.322 49.9646 482.674 52.2862 cv
481.617 53.7762 481.135 55.2967 481.137 56.7786 cv
481.137 58.7202 481.953 60.5696 483.269 62.2377 cv
485.246 64.7413 488.355 66.8692 491.719 68.3868 cv
494.946 69.8396 498.407 70.7293 501.354 70.8011 cv
246.472 52.2027 mo
246.472 82.1554 li
377.787 82.1554 li
377.787 52.2027 li
246.472 52.2027 li
283.291 541.547 mo
283.291 521.142 li
328.509 541.447 li
284.463 541.447 li
284.063 541.447 283.672 541.481 283.291 541.547 cv
341 538.235 mo
346.898 532.503 li
348.05 535.069 li
341 538.235 li
341 538.235 li
341 538.235 mo
348.05 535.069 li
349.202 537.635 li
341 538.235 li
537.711 505.622 mo
535.461 505.622 li
535.461 505.616 li
537.711 505.616 li
537.711 505.622 li
532.461 505.622 mo
530.211 505.622 li
530.211 505.616 li
532.461 505.616 li
532.461 505.622 li
527.211 505.622 mo
524.961 505.622 li
524.961 505.616 li
527.211 505.616 li
527.211 505.622 li
521.961 505.622 mo
519.711 505.622 li
519.711 505.616 li
521.961 505.616 li
521.961 505.622 li
516.711 505.622 mo
514.461 505.622 li
514.461 505.616 li
516.711 505.616 li
516.711 505.622 li
511.461 505.622 mo
509.211 505.622 li
509.211 505.616 li
511.461 505.616 li
511.461 505.622 li
506.211 505.622 mo
503.961 505.622 li
503.961 505.616 li
506.211 505.616 li
506.211 505.622 li
500.961 505.622 mo
498.711 505.622 li
498.711 505.616 li
500.961 505.616 li
500.961 505.622 li
495.711 505.622 mo
493.461 505.622 li
493.461 505.616 li
495.711 505.616 li
495.711 505.622 li
490.461 505.622 mo
488.211 505.622 li
488.211 505.616 li
490.461 505.616 li
490.461 505.622 li
485.211 505.622 mo
482.961 505.622 li
482.961 505.616 li
485.211 505.616 li
485.211 505.622 li
479.961 505.622 mo
477.711 505.622 li
477.711 505.616 li
479.961 505.616 li
479.961 505.622 li
474.711 505.622 mo
472.461 505.622 li
472.461 505.616 li
474.711 505.616 li
474.711 505.622 li
470.651 505.622 mo
417.295 505.622 li
454.484 488.924 li
455.114 489.554 li
454.849 489.819 li
456.97 491.941 li
457.235 491.675 li
458.826 493.266 li
458.561 493.532 li
460.682 495.653 li
460.948 495.388 li
462.538 496.979 li
462.273 497.244 li
464.395 499.365 li
464.66 499.1 li
466.251 500.691 li
465.986 500.956 li
468.107 503.078 li
468.372 502.812 li
469.963 504.403 li
469.698 504.669 li
470.651 505.622 li
248.727 505.622 mo
208.832 505.622 li
208.832 505.622 li
208.832 504.956 li
208.457 504.956 li
208.457 502.706 li
208.832 502.706 li
208.832 499.706 li
208.457 499.706 li
208.457 497.456 li
208.832 497.456 li
208.832 494.456 li
208.457 494.456 li
208.457 492.206 li
208.832 492.206 li
208.832 489.206 li
208.457 489.206 li
208.457 487.539 li
248.727 505.622 li
277.662 342.502 mo
208.832 342.502 li
208.832 342.207 li
208.457 342.207 li
208.457 339.956 li
208.832 339.956 li
208.832 337.552 li
208.832 337.453 208.792 337.356 208.722 337.287 cv
208.301 336.866 li
208.036 337.131 li
206.445 335.54 li
206.71 335.275 li
204.589 333.153 li
204.323 333.418 li
202.732 331.827 li
202.997 331.562 li
201.97 330.534 li
277.662 330.534 li
277.662 342.502 li
246.097 131.624 mo
156.645 131.624 li
156.645 123.91 li
246.097 123.91 li
246.097 126.379 li
246.472 126.379 li
246.472 128.629 li
246.097 128.629 li
246.097 131.624 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
246.472 85.4075 mo
405.134 85.4075 li
417.969 98.2424 li
417.969 162.415 li
259.307 162.415 li
246.472 149.58 li
246.472 85.4075 li
.0523079 .75967 .593072 .00134279 cmyk
f
251.722 85.7825 mo
254.722 85.7825 li
254.722 85.0325 li
251.722 85.0325 li
251.722 85.7825 li
256.972 85.7825 mo
259.972 85.7825 li
259.972 85.0325 li
256.972 85.0325 li
256.972 85.7825 li
262.222 85.7825 mo
265.222 85.7825 li
265.222 85.0325 li
262.222 85.0325 li
262.222 85.7825 li
267.472 85.7825 mo
270.472 85.7825 li
270.472 85.0325 li
267.472 85.0325 li
267.472 85.7825 li
272.722 85.7825 mo
275.722 85.7825 li
275.722 85.0325 li
272.722 85.0325 li
272.722 85.7825 li
277.972 85.7825 mo
280.972 85.7825 li
280.972 85.0325 li
277.972 85.0325 li
277.972 85.7825 li
283.222 85.7825 mo
286.222 85.7825 li
286.222 85.0325 li
283.222 85.0325 li
283.222 85.7825 li
288.472 85.7825 mo
291.472 85.7825 li
291.472 85.0325 li
288.472 85.0325 li
288.472 85.7825 li
293.722 85.7825 mo
296.722 85.7825 li
296.722 85.0325 li
293.722 85.0325 li
293.722 85.7825 li
298.972 85.7825 mo
301.972 85.7825 li
301.972 85.0325 li
298.972 85.0325 li
298.972 85.7825 li
304.222 85.7825 mo
307.222 85.7825 li
307.222 85.0325 li
304.222 85.0325 li
304.222 85.7825 li
309.472 85.7825 mo
312.472 85.7825 li
312.472 85.0325 li
309.472 85.0325 li
309.472 85.7825 li
314.722 85.7825 mo
317.722 85.7825 li
317.722 85.0325 li
314.722 85.0325 li
314.722 85.7825 li
319.972 85.7825 mo
322.972 85.7825 li
322.972 85.0325 li
319.972 85.0325 li
319.972 85.7825 li
325.222 85.7825 mo
328.222 85.7825 li
328.222 85.0325 li
325.222 85.0325 li
325.222 85.7825 li
330.472 85.7825 mo
333.472 85.7825 li
333.472 85.0325 li
330.472 85.0325 li
330.472 85.7825 li
335.722 85.7825 mo
338.722 85.7825 li
338.722 85.0325 li
335.722 85.0325 li
335.722 85.7825 li
340.972 85.7825 mo
343.972 85.7825 li
343.972 85.0325 li
340.972 85.0325 li
340.972 85.7825 li
346.222 85.7825 mo
349.222 85.7825 li
349.222 85.0325 li
346.222 85.0325 li
346.222 85.7825 li
351.472 85.7825 mo
354.472 85.7825 li
354.472 85.0325 li
351.472 85.0325 li
351.472 85.7825 li
356.722 85.7825 mo
359.722 85.7825 li
359.722 85.0325 li
356.722 85.0325 li
356.722 85.7825 li
361.972 85.7825 mo
364.972 85.7825 li
364.972 85.0325 li
361.972 85.0325 li
361.972 85.7825 li
367.222 85.7825 mo
370.222 85.7825 li
370.222 85.0325 li
367.222 85.0325 li
367.222 85.7825 li
372.472 85.7825 mo
375.472 85.7825 li
375.472 85.0325 li
372.472 85.0325 li
372.472 85.7825 li
377.722 85.7825 mo
380.722 85.7825 li
380.722 85.0325 li
377.722 85.0325 li
377.722 85.7825 li
382.972 85.7825 mo
385.972 85.7825 li
385.972 85.0325 li
382.972 85.0325 li
382.972 85.7825 li
388.222 85.7825 mo
391.222 85.7825 li
391.222 85.0325 li
388.222 85.0325 li
388.222 85.7825 li
393.472 85.7825 mo
396.472 85.7825 li
396.472 85.0325 li
393.472 85.0325 li
393.472 85.7825 li
398.722 85.7825 mo
401.722 85.7825 li
401.722 85.0325 li
398.722 85.0325 li
398.722 85.7825 li
403.972 85.7825 mo
404.978 85.7825 li
406.168 86.9728 li
406.699 86.4424 li
405.399 85.1424 li
405.329 85.0724 405.232 85.0325 405.134 85.0325 cv
403.972 85.0325 li
403.972 85.7825 li
407.759 88.5638 mo
409.881 90.685 li
410.411 90.1547 li
408.29 88.0335 li
407.759 88.5638 li
411.472 92.2761 mo
413.593 94.3974 li
414.123 93.8671 li
412.002 91.7457 li
411.472 92.2761 li
415.184 95.9883 mo
417.305 98.1097 li
417.836 97.5794 li
415.714 95.458 li
415.184 95.9883 li
417.593 99.9297 mo
417.593 102.93 li
418.343 102.93 li
418.343 99.9297 li
417.593 99.9297 li
417.593 105.18 mo
417.593 108.18 li
418.343 108.18 li
418.343 105.18 li
417.593 105.18 li
417.593 110.43 mo
417.593 113.43 li
418.343 113.43 li
418.343 110.43 li
417.593 110.43 li
417.593 115.68 mo
417.593 118.68 li
418.343 118.68 li
418.343 115.68 li
417.593 115.68 li
417.593 120.93 mo
417.593 123.93 li
418.343 123.93 li
418.343 120.93 li
417.593 120.93 li
417.593 126.18 mo
417.593 129.18 li
418.343 129.18 li
418.343 126.18 li
417.593 126.18 li
417.593 131.43 mo
417.593 134.43 li
418.343 134.43 li
418.343 131.43 li
417.593 131.43 li
417.593 136.68 mo
417.593 139.68 li
418.343 139.68 li
418.343 136.68 li
417.593 136.68 li
417.593 141.93 mo
417.593 144.93 li
418.343 144.93 li
418.343 141.93 li
417.593 141.93 li
417.593 147.18 mo
417.593 150.18 li
418.343 150.18 li
418.343 147.18 li
417.593 147.18 li
417.593 152.43 mo
417.593 155.43 li
418.343 155.43 li
418.343 152.43 li
417.593 152.43 li
417.593 157.68 mo
417.593 160.68 li
418.343 160.68 li
418.343 157.68 li
417.593 157.68 li
417.454 162.04 mo
414.454 162.04 li
414.454 162.79 li
417.454 162.79 li
417.454 162.04 li
412.204 162.04 mo
409.204 162.04 li
409.204 162.79 li
412.204 162.79 li
412.204 162.04 li
406.954 162.04 mo
403.954 162.04 li
403.954 162.79 li
406.954 162.79 li
406.954 162.04 li
401.704 162.04 mo
398.704 162.04 li
398.704 162.79 li
401.704 162.79 li
401.704 162.04 li
396.454 162.04 mo
393.454 162.04 li
393.454 162.79 li
396.454 162.79 li
396.454 162.04 li
391.204 162.04 mo
388.204 162.04 li
388.204 162.79 li
391.204 162.79 li
391.204 162.04 li
385.954 162.04 mo
382.954 162.04 li
382.954 162.79 li
385.954 162.79 li
385.954 162.04 li
380.704 162.04 mo
377.704 162.04 li
377.704 162.79 li
380.704 162.79 li
380.704 162.04 li
375.454 162.04 mo
372.454 162.04 li
372.454 162.79 li
375.454 162.79 li
375.454 162.04 li
370.204 162.04 mo
367.204 162.04 li
367.204 162.79 li
370.204 162.79 li
370.204 162.04 li
364.954 162.04 mo
361.954 162.04 li
361.954 162.79 li
364.954 162.79 li
364.954 162.04 li
359.704 162.04 mo
356.704 162.04 li
356.704 162.79 li
359.704 162.79 li
359.704 162.04 li
354.454 162.04 mo
351.454 162.04 li
351.454 162.79 li
354.454 162.79 li
354.454 162.04 li
349.204 162.04 mo
346.204 162.04 li
346.204 162.79 li
349.204 162.79 li
349.204 162.04 li
343.954 162.04 mo
340.954 162.04 li
340.954 162.79 li
343.954 162.79 li
343.954 162.04 li
338.704 162.04 mo
335.704 162.04 li
335.704 162.79 li
338.704 162.79 li
338.704 162.04 li
333.454 162.04 mo
330.454 162.04 li
330.454 162.79 li
333.454 162.79 li
333.454 162.04 li
328.204 162.04 mo
325.204 162.04 li
325.204 162.79 li
328.204 162.79 li
328.204 162.04 li
322.954 162.04 mo
319.954 162.04 li
319.954 162.79 li
322.954 162.79 li
322.954 162.04 li
317.704 162.04 mo
314.704 162.04 li
314.704 162.79 li
317.704 162.79 li
317.704 162.04 li
312.454 162.04 mo
309.454 162.04 li
309.454 162.79 li
312.454 162.79 li
312.454 162.04 li
307.204 162.04 mo
304.204 162.04 li
304.204 162.79 li
307.204 162.79 li
307.204 162.04 li
301.954 162.04 mo
298.954 162.04 li
298.954 162.79 li
301.954 162.79 li
301.954 162.04 li
296.704 162.04 mo
293.704 162.04 li
293.704 162.79 li
296.704 162.79 li
296.704 162.04 li
291.454 162.04 mo
288.454 162.04 li
288.454 162.79 li
291.454 162.79 li
291.454 162.04 li
286.204 162.04 mo
283.204 162.04 li
283.204 162.79 li
286.204 162.79 li
286.204 162.04 li
280.954 162.04 mo
277.954 162.04 li
277.954 162.79 li
280.954 162.79 li
280.954 162.04 li
275.704 162.04 mo
272.704 162.04 li
272.704 162.79 li
275.704 162.79 li
275.704 162.04 li
270.454 162.04 mo
267.454 162.04 li
267.454 162.79 li
270.454 162.79 li
270.454 162.04 li
265.204 162.04 mo
262.204 162.04 li
262.204 162.79 li
265.204 162.79 li
265.204 162.04 li
259.954 162.04 mo
259.463 162.04 li
257.909 160.486 li
257.378 161.017 li
259.042 162.681 li
259.112 162.75 259.208 162.79 259.307 162.79 cv
259.954 162.79 li
259.954 162.04 li
256.317 158.895 mo
254.196 156.774 li
253.666 157.304 li
255.787 159.426 li
256.317 158.895 li
252.605 155.183 mo
250.484 153.062 li
249.954 153.592 li
252.075 155.713 li
252.605 155.183 li
248.893 151.471 mo
246.772 149.349 li
246.241 149.88 li
248.363 152.001 li
248.893 151.471 li
246.847 147.379 mo
246.847 144.379 li
246.097 144.379 li
246.097 147.379 li
246.847 147.379 li
246.847 142.129 mo
246.847 139.129 li
246.097 139.129 li
246.097 142.129 li
246.847 142.129 li
246.847 136.879 mo
246.847 133.879 li
246.097 133.879 li
246.097 136.879 li
246.847 136.879 li
246.847 131.629 mo
246.847 128.629 li
246.097 128.629 li
246.097 131.629 li
246.847 131.629 li
246.847 126.379 mo
246.847 123.379 li
246.097 123.379 li
246.097 126.379 li
246.847 126.379 li
246.847 121.129 mo
246.847 118.129 li
246.097 118.129 li
246.097 121.129 li
246.847 121.129 li
246.847 115.879 mo
246.847 112.879 li
246.097 112.879 li
246.097 115.879 li
246.847 115.879 li
246.847 110.629 mo
246.847 107.629 li
246.097 107.629 li
246.097 110.629 li
246.847 110.629 li
246.847 105.379 mo
246.847 102.379 li
246.097 102.379 li
246.097 105.379 li
246.847 105.379 li
246.847 100.129 mo
246.847 97.1286 li
246.097 97.1286 li
246.097 100.129 li
246.847 100.129 li
246.847 94.8786 mo
246.847 91.8786 li
246.097 91.8786 li
246.097 94.8786 li
246.847 94.8786 li
246.847 89.6287 mo
246.847 86.6287 li
246.097 86.6287 li
246.097 89.6287 li
246.847 89.6287 li
246.472 85.7825 mo
249.472 85.7825 li
249.472 85.0325 li
246.472 85.0325 li
246.472 85.7825 li
.750271 .679713 .654902 .901945 cmyk
f
6.53549 303.937 mo
174.842 303.937 li
208.457 337.552 li
208.457 505.622 li
40.1502 505.622 li
6.53549 472.007 li
6.53549 303.937 li
.592523 .2374 0 0 cmyk
f
11.7854 304.312 mo
14.7854 304.312 li
14.7854 303.562 li
11.7854 303.562 li
11.7854 304.312 li
17.0354 304.312 mo
20.0354 304.312 li
20.0354 303.562 li
17.0354 303.562 li
17.0354 304.312 li
22.2854 304.312 mo
25.2854 304.312 li
25.2854 303.562 li
22.2854 303.562 li
22.2854 304.312 li
27.5355 304.312 mo
30.5355 304.312 li
30.5355 303.562 li
27.5355 303.562 li
27.5355 304.312 li
32.7853 304.312 mo
35.7853 304.312 li
35.7853 303.562 li
32.7853 303.562 li
32.7853 304.312 li
38.0354 304.312 mo
41.0354 304.312 li
41.0354 303.562 li
38.0354 303.562 li
38.0354 304.312 li
43.2854 304.312 mo
46.2854 304.312 li
46.2854 303.562 li
43.2854 303.562 li
43.2854 304.312 li
48.5355 304.312 mo
51.5355 304.312 li
51.5355 303.562 li
48.5355 303.562 li
48.5355 304.312 li
53.7853 304.312 mo
56.7853 304.312 li
56.7853 303.562 li
53.7853 303.562 li
53.7853 304.312 li
59.0354 304.312 mo
62.0354 304.312 li
62.0354 303.562 li
59.0354 303.562 li
59.0354 304.312 li
64.2854 304.312 mo
67.2854 304.312 li
67.2854 303.562 li
64.2854 303.562 li
64.2854 304.312 li
69.5354 304.312 mo
72.5354 304.312 li
72.5354 303.562 li
69.5354 303.562 li
69.5354 304.312 li
74.7853 304.312 mo
77.7853 304.312 li
77.7853 303.562 li
74.7853 303.562 li
74.7853 304.312 li
80.0354 304.312 mo
83.0353 304.312 li
83.0353 303.562 li
80.0354 303.562 li
80.0354 304.312 li
85.2854 304.312 mo
88.2854 304.312 li
88.2854 303.562 li
85.2854 303.562 li
85.2854 304.312 li
90.5354 304.312 mo
93.5354 304.312 li
93.5354 303.562 li
90.5354 303.562 li
90.5354 304.312 li
95.7853 304.312 mo
98.7853 304.312 li
98.7853 303.562 li
95.7853 303.562 li
95.7853 304.312 li
101.035 304.312 mo
104.035 304.312 li
104.035 303.562 li
101.035 303.562 li
101.035 304.312 li
106.285 304.312 mo
109.285 304.312 li
109.285 303.562 li
106.285 303.562 li
106.285 304.312 li
111.535 304.312 mo
114.535 304.312 li
114.535 303.562 li
111.535 303.562 li
111.535 304.312 li
116.785 304.312 mo
119.785 304.312 li
119.785 303.562 li
116.785 303.562 li
116.785 304.312 li
122.035 304.312 mo
125.035 304.312 li
125.035 303.562 li
122.035 303.562 li
122.035 304.312 li
127.285 304.312 mo
130.285 304.312 li
130.285 303.562 li
127.285 303.562 li
127.285 304.312 li
132.535 304.312 mo
135.535 304.312 li
135.535 303.562 li
132.535 303.562 li
132.535 304.312 li
137.785 304.312 mo
140.785 304.312 li
140.785 303.562 li
137.785 303.562 li
137.785 304.312 li
143.035 304.312 mo
146.035 304.312 li
146.035 303.562 li
143.035 303.562 li
143.035 304.312 li
148.285 304.312 mo
151.285 304.312 li
151.285 303.562 li
148.285 303.562 li
148.285 304.312 li
153.535 304.312 mo
156.535 304.312 li
156.535 303.562 li
153.535 303.562 li
153.535 304.312 li
158.785 304.312 mo
161.785 304.312 li
161.785 303.562 li
158.785 303.562 li
158.785 304.312 li
164.035 304.312 mo
167.035 304.312 li
167.035 303.562 li
164.035 303.562 li
164.035 304.312 li
169.285 304.312 mo
172.285 304.312 li
172.285 303.562 li
169.285 303.562 li
169.285 304.312 li
174.535 304.312 mo
174.686 304.312 li
176.481 306.106 li
177.011 305.576 li
175.107 303.672 li
175.037 303.602 174.941 303.562 174.842 303.562 cv
174.535 303.562 li
174.535 304.312 li
178.072 307.697 mo
180.193 309.819 li
180.724 309.288 li
178.602 307.167 li
178.072 307.697 li
181.784 311.41 mo
183.906 313.531 li
184.436 313.001 li
182.315 310.88 li
181.784 311.41 li
185.497 315.122 mo
187.618 317.243 li
188.148 316.713 li
186.027 314.592 li
185.497 315.122 li
189.209 318.834 mo
191.33 320.956 li
191.861 320.425 li
189.739 318.304 li
189.209 318.834 li
192.921 322.547 mo
195.043 324.668 li
195.573 324.138 li
193.452 322.016 li
192.921 322.547 li
196.634 326.259 mo
198.755 328.38 li
199.285 327.85 li
197.164 325.729 li
196.634 326.259 li
200.346 329.971 mo
202.467 332.093 li
202.997 331.562 li
200.876 329.441 li
200.346 329.971 li
204.058 333.684 mo
206.18 335.805 li
206.71 335.275 li
204.589 333.153 li
204.058 333.684 li
207.771 337.396 mo
208.082 337.707 li
208.082 339.956 li
208.832 339.956 li
208.832 337.552 li
208.832 337.453 208.792 337.356 208.722 337.287 cv
208.301 336.866 li
207.771 337.396 li
208.082 342.207 mo
208.082 345.206 li
208.832 345.206 li
208.832 342.207 li
208.082 342.207 li
208.082 347.457 mo
208.082 350.457 li
208.832 350.457 li
208.832 347.457 li
208.082 347.457 li
208.082 352.706 mo
208.082 355.706 li
208.832 355.706 li
208.832 352.706 li
208.082 352.706 li
208.082 357.956 mo
208.082 360.956 li
208.832 360.956 li
208.832 357.956 li
208.082 357.956 li
208.082 363.206 mo
208.082 366.206 li
208.832 366.206 li
208.832 363.206 li
208.082 363.206 li
208.082 368.456 mo
208.082 371.457 li
208.832 371.457 li
208.832 368.456 li
208.082 368.456 li
208.082 373.706 mo
208.082 376.706 li
208.832 376.706 li
208.832 373.706 li
208.082 373.706 li
208.082 378.956 mo
208.082 381.956 li
208.832 381.956 li
208.832 378.956 li
208.082 378.956 li
208.082 384.206 mo
208.082 387.206 li
208.832 387.206 li
208.832 384.206 li
208.082 384.206 li
208.082 389.457 mo
208.082 392.457 li
208.832 392.457 li
208.832 389.457 li
208.082 389.457 li
208.082 394.706 mo
208.082 397.706 li
208.832 397.706 li
208.832 394.706 li
208.082 394.706 li
208.082 399.956 mo
208.082 402.956 li
208.832 402.956 li
208.832 399.956 li
208.082 399.956 li
208.082 405.206 mo
208.082 408.206 li
208.832 408.206 li
208.832 405.206 li
208.082 405.206 li
208.082 410.456 mo
208.082 413.456 li
208.832 413.456 li
208.832 410.456 li
208.082 410.456 li
208.082 415.706 mo
208.082 418.706 li
208.832 418.706 li
208.832 415.706 li
208.082 415.706 li
208.082 420.956 mo
208.082 423.956 li
208.832 423.956 li
208.832 420.956 li
208.082 420.956 li
208.082 426.206 mo
208.082 429.206 li
208.832 429.206 li
208.832 426.206 li
208.082 426.206 li
208.082 431.456 mo
208.082 434.456 li
208.832 434.456 li
208.832 431.456 li
208.082 431.456 li
208.082 436.706 mo
208.082 439.706 li
208.832 439.706 li
208.832 436.706 li
208.082 436.706 li
208.082 441.956 mo
208.082 444.956 li
208.832 444.956 li
208.832 441.956 li
208.082 441.956 li
208.082 447.206 mo
208.082 450.206 li
208.832 450.206 li
208.832 447.206 li
208.082 447.206 li
208.082 452.456 mo
208.082 455.456 li
208.832 455.456 li
208.832 452.456 li
208.082 452.456 li
208.082 457.706 mo
208.082 460.706 li
208.832 460.706 li
208.832 457.706 li
208.082 457.706 li
208.082 462.956 mo
208.082 465.956 li
208.832 465.956 li
208.832 462.956 li
208.082 462.956 li
208.082 468.206 mo
208.082 471.206 li
208.832 471.206 li
208.832 468.206 li
208.082 468.206 li
208.082 473.456 mo
208.082 476.456 li
208.832 476.456 li
208.832 473.456 li
208.082 473.456 li
208.082 478.706 mo
208.082 481.706 li
208.832 481.706 li
208.832 478.706 li
208.082 478.706 li
208.082 483.956 mo
208.082 486.956 li
208.832 486.956 li
208.832 483.956 li
208.082 483.956 li
208.082 489.206 mo
208.082 492.206 li
208.832 492.206 li
208.832 489.206 li
208.082 489.206 li
208.082 494.456 mo
208.082 497.456 li
208.832 497.456 li
208.832 494.456 li
208.082 494.456 li
208.082 499.706 mo
208.082 502.706 li
208.832 502.706 li
208.832 499.706 li
208.082 499.706 li
208.082 504.956 mo
208.082 505.247 li
206.122 505.247 li
206.122 505.997 li
208.457 505.997 li
208.555 505.997 208.652 505.957 208.722 505.887 cv
208.792 505.817 208.832 505.721 208.832 505.622 cv
208.832 504.956 li
208.082 504.956 li
203.872 505.247 mo
200.872 505.247 li
200.872 505.997 li
203.872 505.997 li
203.872 505.247 li
198.622 505.247 mo
195.622 505.247 li
195.622 505.997 li
198.622 505.997 li
198.622 505.247 li
193.372 505.247 mo
190.372 505.247 li
190.372 505.997 li
193.372 505.997 li
193.372 505.247 li
188.122 505.247 mo
185.122 505.247 li
185.122 505.997 li
188.122 505.997 li
188.122 505.247 li
182.872 505.247 mo
179.872 505.247 li
179.872 505.997 li
182.872 505.997 li
182.872 505.247 li
177.622 505.247 mo
174.622 505.247 li
174.622 505.997 li
177.622 505.997 li
177.622 505.247 li
172.372 505.247 mo
169.372 505.247 li
169.372 505.997 li
172.372 505.997 li
172.372 505.247 li
167.122 505.247 mo
164.122 505.247 li
164.122 505.997 li
167.122 505.997 li
167.122 505.247 li
161.872 505.247 mo
158.872 505.247 li
158.872 505.997 li
161.872 505.997 li
161.872 505.247 li
156.622 505.247 mo
153.622 505.247 li
153.622 505.997 li
156.622 505.997 li
156.622 505.247 li
151.372 505.247 mo
148.372 505.247 li
148.372 505.997 li
151.372 505.997 li
151.372 505.247 li
146.122 505.247 mo
143.122 505.247 li
143.122 505.997 li
146.122 505.997 li
146.122 505.247 li
140.872 505.247 mo
137.872 505.247 li
137.872 505.997 li
140.872 505.997 li
140.872 505.247 li
135.622 505.247 mo
132.622 505.247 li
132.622 505.997 li
135.622 505.997 li
135.622 505.247 li
130.372 505.247 mo
127.372 505.247 li
127.372 505.997 li
130.372 505.997 li
130.372 505.247 li
125.122 505.247 mo
122.122 505.247 li
122.122 505.997 li
125.122 505.997 li
125.122 505.247 li
119.872 505.247 mo
116.872 505.247 li
116.872 505.997 li
119.872 505.997 li
119.872 505.247 li
114.622 505.247 mo
111.622 505.247 li
111.622 505.997 li
114.622 505.997 li
114.622 505.247 li
109.372 505.247 mo
106.372 505.247 li
106.372 505.997 li
109.372 505.997 li
109.372 505.247 li
104.122 505.247 mo
101.122 505.247 li
101.122 505.997 li
104.122 505.997 li
104.122 505.247 li
98.8723 505.247 mo
95.8723 505.247 li
95.8723 505.997 li
98.8723 505.997 li
98.8723 505.247 li
93.6224 505.247 mo
90.6224 505.247 li
90.6224 505.997 li
93.6224 505.997 li
93.6224 505.247 li
88.3723 505.247 mo
85.3724 505.247 li
85.3724 505.997 li
88.3723 505.997 li
88.3723 505.247 li
83.1223 505.247 mo
80.1223 505.247 li
80.1223 505.997 li
83.1223 505.997 li
83.1223 505.247 li
77.8724 505.247 mo
74.8723 505.247 li
74.8723 505.997 li
77.8724 505.997 li
77.8724 505.247 li
72.6224 505.247 mo
69.6224 505.247 li
69.6224 505.997 li
72.6224 505.997 li
72.6224 505.247 li
67.3724 505.247 mo
64.3724 505.247 li
64.3724 505.997 li
67.3724 505.997 li
67.3724 505.247 li
62.1223 505.247 mo
59.1223 505.247 li
59.1223 505.997 li
62.1223 505.997 li
62.1223 505.247 li
56.8725 505.247 mo
53.8725 505.247 li
53.8725 505.997 li
56.8725 505.997 li
56.8725 505.247 li
51.6224 505.247 mo
48.6224 505.247 li
48.6224 505.997 li
51.6224 505.997 li
51.6224 505.247 li
46.3724 505.247 mo
43.3724 505.247 li
43.3724 505.997 li
46.3724 505.997 li
46.3724 505.247 li
41.1225 505.247 mo
40.3057 505.247 li
38.9815 503.923 li
38.4512 504.453 li
39.8851 505.887 li
39.9559 505.958 40.05 505.997 40.1502 505.997 cv
41.1225 505.997 li
41.1225 505.247 li
37.3905 502.332 mo
35.2693 500.211 li
34.7389 500.741 li
36.8603 502.862 li
37.3905 502.332 li
33.6783 498.619 mo
31.5569 496.498 li
31.0267 497.028 li
33.1479 499.15 li
33.6783 498.619 li
29.966 494.907 mo
27.8446 492.786 li
27.3143 493.316 li
29.4355 495.438 li
29.966 494.907 li
26.2536 491.195 mo
24.1324 489.074 li
23.602 489.604 li
25.7233 491.725 li
26.2536 491.195 li
22.5413 487.483 mo
20.42 485.361 li
19.8898 485.892 li
22.011 488.013 li
22.5413 487.483 li
18.8291 483.77 mo
16.7077 481.649 li
16.1774 482.179 li
18.2986 484.301 li
18.8291 483.77 li
15.1167 480.058 mo
12.9955 477.937 li
12.465 478.467 li
14.5864 480.588 li
15.1167 480.058 li
11.4043 476.346 mo
9.28311 474.224 li
8.75268 474.755 li
10.8741 476.876 li
11.4043 476.346 li
7.69214 472.633 mo
6.91047 471.852 li
6.91047 470.268 li
6.16035 470.268 li
6.16035 472.007 li
6.16035 472.106 6.2004 472.202 6.2702 472.272 cv
7.16171 473.164 li
7.69214 472.633 li
6.91047 468.018 mo
6.91047 465.018 li
6.16035 465.018 li
6.16035 468.018 li
6.91047 468.018 li
6.91047 462.768 mo
6.91047 459.768 li
6.16035 459.768 li
6.16035 462.768 li
6.91047 462.768 li
6.91047 457.518 mo
6.91047 454.518 li
6.16035 454.518 li
6.16035 457.518 li
6.91047 457.518 li
6.91047 452.268 mo
6.91047 449.268 li
6.16035 449.268 li
6.16035 452.268 li
6.91047 452.268 li
6.91047 447.018 mo
6.91047 444.018 li
6.16035 444.018 li
6.16035 447.018 li
6.91047 447.018 li
6.91047 441.768 mo
6.91047 438.768 li
6.16035 438.768 li
6.16035 441.768 li
6.91047 441.768 li
6.91047 436.518 mo
6.91047 433.518 li
6.16035 433.518 li
6.16035 436.518 li
6.91047 436.518 li
6.91047 431.268 mo
6.91047 428.268 li
6.16035 428.268 li
6.16035 431.268 li
6.91047 431.268 li
6.91047 426.018 mo
6.91047 423.018 li
6.16035 423.018 li
6.16035 426.018 li
6.91047 426.018 li
6.91047 420.768 mo
6.91047 417.768 li
6.16035 417.768 li
6.16035 420.768 li
6.91047 420.768 li
6.91047 415.518 mo
6.91047 412.518 li
6.16035 412.518 li
6.16035 415.518 li
6.91047 415.518 li
6.91047 410.268 mo
6.91047 407.268 li
6.16035 407.268 li
6.16035 410.268 li
6.91047 410.268 li
6.91047 405.018 mo
6.91047 402.018 li
6.16035 402.018 li
6.16035 405.018 li
6.91047 405.018 li
6.91047 399.768 mo
6.91047 396.768 li
6.16035 396.768 li
6.16035 399.768 li
6.91047 399.768 li
6.91047 394.518 mo
6.91047 391.518 li
6.16035 391.518 li
6.16035 394.518 li
6.91047 394.518 li
6.91047 389.268 mo
6.91047 386.268 li
6.16035 386.268 li
6.16035 389.268 li
6.91047 389.268 li
6.91047 384.018 mo
6.91047 381.018 li
6.16035 381.018 li
6.16035 384.018 li
6.91047 384.018 li
6.91047 378.768 mo
6.91047 375.768 li
6.16035 375.768 li
6.16035 378.768 li
6.91047 378.768 li
6.91047 373.518 mo
6.91047 370.518 li
6.16035 370.518 li
6.16035 373.518 li
6.91047 373.518 li
6.91047 368.268 mo
6.91047 365.268 li
6.16035 365.268 li
6.16035 368.268 li
6.91047 368.268 li
6.91047 363.018 mo
6.91047 360.018 li
6.16035 360.018 li
6.16035 363.018 li
6.91047 363.018 li
6.91047 357.768 mo
6.91047 354.768 li
6.16035 354.768 li
6.16035 357.768 li
6.91047 357.768 li
6.91047 352.518 mo
6.91047 349.518 li
6.16035 349.518 li
6.16035 352.518 li
6.91047 352.518 li
6.91047 347.268 mo
6.91047 344.268 li
6.16035 344.268 li
6.16035 347.268 li
6.91047 347.268 li
6.91047 342.018 mo
6.91047 339.018 li
6.16035 339.018 li
6.16035 342.018 li
6.91047 342.018 li
6.91047 336.768 mo
6.91047 333.768 li
6.16035 333.768 li
6.16035 336.768 li
6.91047 336.768 li
6.91047 331.518 mo
6.91047 328.518 li
6.16035 328.518 li
6.16035 331.518 li
6.91047 331.518 li
6.91047 326.268 mo
6.91047 323.268 li
6.16035 323.268 li
6.16035 326.268 li
6.91047 326.268 li
6.91047 321.018 mo
6.91047 318.018 li
6.16035 318.018 li
6.16035 321.018 li
6.91047 321.018 li
6.91047 315.768 mo
6.91047 312.768 li
6.16035 312.768 li
6.16035 315.768 li
6.91047 315.768 li
6.91047 310.518 mo
6.91047 307.518 li
6.16035 307.518 li
6.16035 310.518 li
6.91047 310.518 li
6.91047 305.268 mo
6.91047 304.312 li
9.53549 304.312 li
9.53549 303.562 li
6.53549 303.562 li
6.4366 303.562 6.34016 303.602 6.2702 303.672 cv
6.2004 303.742 6.16035 303.838 6.16035 303.937 cv
6.16035 305.268 li
6.91047 305.268 li
.750271 .679713 .654902 .901945 cmyk
f
437.561 303.931 mo
613.899 303.931 li
647.514 337.546 li
647.514 505.616 li
471.176 505.616 li
437.561 472.001 li
437.561 303.931 li
.00393683 .347387 .705714 0 cmyk
f
442.811 304.306 mo
445.811 304.306 li
445.811 303.556 li
442.811 303.556 li
442.811 304.306 li
448.061 304.306 mo
451.061 304.306 li
451.061 303.556 li
448.061 303.556 li
448.061 304.306 li
453.311 304.306 mo
456.311 304.306 li
456.311 303.556 li
453.311 303.556 li
453.311 304.306 li
458.561 304.306 mo
461.561 304.306 li
461.561 303.556 li
458.561 303.556 li
458.561 304.306 li
463.811 304.306 mo
466.811 304.306 li
466.811 303.556 li
463.811 303.556 li
463.811 304.306 li
469.061 304.306 mo
472.061 304.306 li
472.061 303.556 li
469.061 303.556 li
469.061 304.306 li
474.311 304.306 mo
477.311 304.306 li
477.311 303.556 li
474.311 303.556 li
474.311 304.306 li
479.561 304.306 mo
482.561 304.306 li
482.561 303.556 li
479.561 303.556 li
479.561 304.306 li
484.811 304.306 mo
487.811 304.306 li
487.811 303.556 li
484.811 303.556 li
484.811 304.306 li
490.061 304.306 mo
493.061 304.306 li
493.061 303.556 li
490.061 303.556 li
490.061 304.306 li
495.311 304.306 mo
498.311 304.306 li
498.311 303.556 li
495.311 303.556 li
495.311 304.306 li
500.561 304.306 mo
503.561 304.306 li
503.561 303.556 li
500.561 303.556 li
500.561 304.306 li
505.811 304.306 mo
508.811 304.306 li
508.811 303.556 li
505.811 303.556 li
505.811 304.306 li
511.061 304.306 mo
514.061 304.306 li
514.061 303.556 li
511.061 303.556 li
511.061 304.306 li
516.311 304.306 mo
519.311 304.306 li
519.311 303.556 li
516.311 303.556 li
516.311 304.306 li
521.561 304.306 mo
524.561 304.306 li
524.561 303.556 li
521.561 303.556 li
521.561 304.306 li
526.811 304.306 mo
529.811 304.306 li
529.811 303.556 li
526.811 303.556 li
526.811 304.306 li
532.061 304.306 mo
535.061 304.306 li
535.061 303.556 li
532.061 303.556 li
532.061 304.306 li
537.311 304.306 mo
540.311 304.306 li
540.311 303.556 li
537.311 303.556 li
537.311 304.306 li
542.561 304.306 mo
545.561 304.306 li
545.561 303.556 li
542.561 303.556 li
542.561 304.306 li
547.811 304.306 mo
550.811 304.306 li
550.811 303.556 li
547.811 303.556 li
547.811 304.306 li
553.061 304.306 mo
556.061 304.306 li
556.061 303.556 li
553.061 303.556 li
553.061 304.306 li
558.311 304.306 mo
561.311 304.306 li
561.311 303.556 li
558.311 303.556 li
558.311 304.306 li
563.561 304.306 mo
566.561 304.306 li
566.561 303.556 li
563.561 303.556 li
563.561 304.306 li
568.811 304.306 mo
571.811 304.306 li
571.811 303.556 li
568.811 303.556 li
568.811 304.306 li
574.061 304.306 mo
577.061 304.306 li
577.061 303.556 li
574.061 303.556 li
574.061 304.306 li
579.311 304.306 mo
582.311 304.306 li
582.311 303.556 li
579.311 303.556 li
579.311 304.306 li
584.561 304.306 mo
587.561 304.306 li
587.561 303.556 li
584.561 303.556 li
584.561 304.306 li
589.811 304.306 mo
592.811 304.306 li
592.811 303.556 li
589.811 303.556 li
589.811 304.306 li
595.061 304.306 mo
598.061 304.306 li
598.061 303.556 li
595.061 303.556 li
595.061 304.306 li
600.311 304.306 mo
603.311 304.306 li
603.311 303.556 li
600.311 303.556 li
600.311 304.306 li
605.561 304.306 mo
608.561 304.306 li
608.561 303.556 li
605.561 303.556 li
605.561 304.306 li
610.811 304.306 mo
613.811 304.306 li
613.811 303.556 li
610.811 303.556 li
610.811 304.306 li
615.162 305.725 mo
617.284 307.846 li
617.814 307.316 li
615.693 305.195 li
615.162 305.725 li
618.875 309.437 mo
620.996 311.559 li
621.526 311.028 li
619.405 308.907 li
618.875 309.437 li
622.587 313.15 mo
624.708 315.271 li
625.239 314.74 li
623.117 312.619 li
622.587 313.15 li
626.299 316.862 mo
628.42 318.983 li
628.951 318.453 li
626.829 316.331 li
626.299 316.862 li
630.012 320.574 mo
632.133 322.695 li
632.663 322.165 li
630.542 320.044 li
630.012 320.574 li
633.724 324.286 mo
635.845 326.408 li
636.375 325.877 li
634.254 323.756 li
633.724 324.286 li
637.436 327.999 mo
639.557 330.12 li
640.088 329.59 li
637.966 327.468 li
637.436 327.999 li
641.148 331.711 mo
643.27 333.832 li
643.8 333.302 li
641.679 331.181 li
641.148 331.711 li
644.861 335.423 mo
646.982 337.545 li
647.512 337.014 li
645.391 334.893 li
644.861 335.423 li
647.139 339.419 mo
647.139 342.419 li
647.889 342.419 li
647.889 339.419 li
647.139 339.419 li
647.139 344.669 mo
647.139 347.669 li
647.889 347.669 li
647.889 344.669 li
647.139 344.669 li
647.139 349.919 mo
647.139 352.919 li
647.889 352.919 li
647.889 349.919 li
647.139 349.919 li
647.139 355.169 mo
647.139 358.169 li
647.889 358.169 li
647.889 355.169 li
647.139 355.169 li
647.139 360.419 mo
647.139 363.419 li
647.889 363.419 li
647.889 360.419 li
647.139 360.419 li
647.139 365.669 mo
647.139 368.669 li
647.889 368.669 li
647.889 365.669 li
647.139 365.669 li
647.139 370.919 mo
647.139 373.919 li
647.889 373.919 li
647.889 370.919 li
647.139 370.919 li
647.139 376.169 mo
647.139 379.169 li
647.889 379.169 li
647.889 376.169 li
647.139 376.169 li
647.139 381.419 mo
647.139 384.419 li
647.889 384.419 li
647.889 381.419 li
647.139 381.419 li
647.139 386.669 mo
647.139 389.669 li
647.889 389.669 li
647.889 386.669 li
647.139 386.669 li
647.139 391.919 mo
647.139 394.919 li
647.889 394.919 li
647.889 391.919 li
647.139 391.919 li
647.139 397.169 mo
647.139 400.169 li
647.889 400.169 li
647.889 397.169 li
647.139 397.169 li
647.139 402.419 mo
647.139 405.419 li
647.889 405.419 li
647.889 402.419 li
647.139 402.419 li
647.139 407.669 mo
647.139 410.669 li
647.889 410.669 li
647.889 407.669 li
647.139 407.669 li
647.139 412.919 mo
647.139 415.919 li
647.889 415.919 li
647.889 412.919 li
647.139 412.919 li
647.139 418.169 mo
647.139 421.169 li
647.889 421.169 li
647.889 418.169 li
647.139 418.169 li
647.139 423.419 mo
647.139 426.419 li
647.889 426.419 li
647.889 423.419 li
647.139 423.419 li
647.139 428.669 mo
647.139 431.669 li
647.889 431.669 li
647.889 428.669 li
647.139 428.669 li
647.139 433.919 mo
647.139 436.919 li
647.889 436.919 li
647.889 433.919 li
647.139 433.919 li
647.139 439.169 mo
647.139 442.169 li
647.889 442.169 li
647.889 439.169 li
647.139 439.169 li
647.139 444.419 mo
647.139 447.419 li
647.889 447.419 li
647.889 444.419 li
647.139 444.419 li
647.139 449.669 mo
647.139 452.669 li
647.889 452.669 li
647.889 449.669 li
647.139 449.669 li
647.139 454.919 mo
647.139 457.919 li
647.889 457.919 li
647.889 454.919 li
647.139 454.919 li
647.139 460.169 mo
647.139 463.169 li
647.889 463.169 li
647.889 460.169 li
647.139 460.169 li
647.139 465.419 mo
647.139 468.419 li
647.889 468.419 li
647.889 465.419 li
647.139 465.419 li
647.139 470.669 mo
647.139 473.669 li
647.889 473.669 li
647.889 470.669 li
647.139 470.669 li
647.139 475.919 mo
647.139 478.919 li
647.889 478.919 li
647.889 475.919 li
647.139 475.919 li
647.139 481.169 mo
647.139 484.169 li
647.889 484.169 li
647.889 481.169 li
647.139 481.169 li
647.139 486.419 mo
647.139 489.419 li
647.889 489.419 li
647.889 486.419 li
647.139 486.419 li
647.139 491.669 mo
647.139 494.669 li
647.889 494.669 li
647.889 491.669 li
647.139 491.669 li
647.139 496.919 mo
647.139 499.919 li
647.889 499.919 li
647.889 496.919 li
647.139 496.919 li
647.139 502.169 mo
647.139 505.169 li
647.889 505.169 li
647.889 502.169 li
647.139 502.169 li
645.711 505.241 mo
642.711 505.241 li
642.711 505.991 li
645.711 505.991 li
645.711 505.241 li
640.461 505.241 mo
637.461 505.241 li
637.461 505.991 li
640.461 505.991 li
640.461 505.241 li
635.211 505.241 mo
632.211 505.241 li
632.211 505.991 li
635.211 505.991 li
635.211 505.241 li
629.961 505.241 mo
626.961 505.241 li
626.961 505.991 li
629.961 505.991 li
629.961 505.241 li
624.711 505.241 mo
621.711 505.241 li
621.711 505.991 li
624.711 505.991 li
624.711 505.241 li
619.461 505.241 mo
616.461 505.241 li
616.461 505.991 li
619.461 505.991 li
619.461 505.241 li
614.21 505.241 mo
611.21 505.241 li
611.21 505.991 li
614.21 505.991 li
614.21 505.241 li
608.961 505.241 mo
605.961 505.241 li
605.961 505.991 li
608.961 505.991 li
608.961 505.241 li
603.711 505.241 mo
600.711 505.241 li
600.711 505.991 li
603.711 505.991 li
603.711 505.241 li
598.461 505.241 mo
595.461 505.241 li
595.461 505.991 li
598.461 505.991 li
598.461 505.241 li
593.211 505.241 mo
590.211 505.241 li
590.211 505.991 li
593.211 505.991 li
593.211 505.241 li
587.961 505.241 mo
584.961 505.241 li
584.961 505.991 li
587.961 505.991 li
587.961 505.241 li
582.711 505.241 mo
579.711 505.241 li
579.711 505.991 li
582.711 505.991 li
582.711 505.241 li
577.461 505.241 mo
574.461 505.241 li
574.461 505.991 li
577.461 505.991 li
577.461 505.241 li
572.211 505.241 mo
569.211 505.241 li
569.211 505.991 li
572.211 505.991 li
572.211 505.241 li
566.96 505.241 mo
563.961 505.241 li
563.961 505.991 li
566.96 505.991 li
566.96 505.241 li
561.711 505.241 mo
558.711 505.241 li
558.711 505.991 li
561.711 505.991 li
561.711 505.241 li
556.461 505.241 mo
553.461 505.241 li
553.461 505.991 li
556.461 505.991 li
556.461 505.241 li
551.211 505.241 mo
548.211 505.241 li
548.211 505.991 li
551.211 505.991 li
551.211 505.241 li
545.961 505.241 mo
542.961 505.241 li
542.961 505.991 li
545.961 505.991 li
545.961 505.241 li
540.711 505.241 mo
537.711 505.241 li
537.711 505.991 li
540.711 505.991 li
540.711 505.241 li
535.461 505.241 mo
532.461 505.241 li
532.461 505.991 li
535.461 505.991 li
535.461 505.241 li
530.211 505.241 mo
527.211 505.241 li
527.211 505.991 li
530.211 505.991 li
530.211 505.241 li
524.961 505.241 mo
521.961 505.241 li
521.961 505.991 li
524.961 505.991 li
524.961 505.241 li
519.711 505.241 mo
516.711 505.241 li
516.711 505.991 li
519.711 505.991 li
519.711 505.241 li
514.461 505.241 mo
511.461 505.241 li
511.461 505.991 li
514.461 505.991 li
514.461 505.241 li
509.211 505.241 mo
506.211 505.241 li
506.211 505.991 li
509.211 505.991 li
509.211 505.241 li
503.961 505.241 mo
500.961 505.241 li
500.961 505.991 li
503.961 505.991 li
503.961 505.241 li
498.711 505.241 mo
495.711 505.241 li
495.711 505.991 li
498.711 505.991 li
498.711 505.241 li
493.461 505.241 mo
490.461 505.241 li
490.461 505.991 li
493.461 505.991 li
493.461 505.241 li
488.211 505.241 mo
485.211 505.241 li
485.211 505.991 li
488.211 505.991 li
488.211 505.241 li
482.961 505.241 mo
479.961 505.241 li
479.961 505.991 li
482.961 505.991 li
482.961 505.241 li
477.711 505.241 mo
474.711 505.241 li
474.711 505.991 li
477.711 505.991 li
477.711 505.241 li
472.461 505.241 mo
471.331 505.241 li
470.228 504.138 li
469.698 504.669 li
470.911 505.881 li
470.981 505.952 471.076 505.991 471.176 505.991 cv
472.461 505.991 li
472.461 505.241 li
468.637 502.547 mo
466.516 500.426 li
465.986 500.956 li
468.107 503.078 li
468.637 502.547 li
464.925 498.835 mo
462.804 496.714 li
462.273 497.244 li
464.395 499.365 li
464.925 498.835 li
461.213 495.123 mo
459.091 493.001 li
458.561 493.532 li
460.682 495.653 li
461.213 495.123 li
457.5 491.41 mo
455.379 489.289 li
454.849 489.819 li
456.97 491.941 li
457.5 491.41 li
453.788 487.698 mo
451.667 485.577 li
451.136 486.107 li
453.258 488.228 li
453.788 487.698 li
450.076 483.986 mo
447.954 481.864 li
447.424 482.395 li
449.545 484.516 li
450.076 483.986 li
446.363 480.273 mo
444.242 478.152 li
443.712 478.682 li
445.833 480.804 li
446.363 480.273 li
442.651 476.561 mo
440.53 474.44 li
439.999 474.97 li
442.121 477.091 li
442.651 476.561 li
438.939 472.849 mo
437.936 471.846 li
437.936 470.575 li
437.186 470.575 li
437.186 472.001 li
437.186 472.1 437.226 472.196 437.296 472.266 cv
438.408 473.379 li
438.939 472.849 li
438.939 472.849 li
437.936 468.325 mo
437.936 465.325 li
437.186 465.325 li
437.186 468.325 li
437.936 468.325 li
437.936 463.075 mo
437.936 460.075 li
437.186 460.075 li
437.186 463.075 li
437.936 463.075 li
437.936 457.825 mo
437.936 454.825 li
437.186 454.825 li
437.186 457.825 li
437.936 457.825 li
437.936 452.575 mo
437.936 449.575 li
437.186 449.575 li
437.186 452.575 li
437.936 452.575 li
437.936 447.325 mo
437.936 444.325 li
437.186 444.325 li
437.186 447.325 li
437.936 447.325 li
437.936 442.075 mo
437.936 439.075 li
437.186 439.075 li
437.186 442.075 li
437.936 442.075 li
437.936 436.825 mo
437.936 433.825 li
437.186 433.825 li
437.186 436.825 li
437.936 436.825 li
437.936 431.575 mo
437.936 428.575 li
437.186 428.575 li
437.186 431.575 li
437.936 431.575 li
437.936 426.325 mo
437.936 423.325 li
437.186 423.325 li
437.186 426.325 li
437.936 426.325 li
437.936 421.075 mo
437.936 418.075 li
437.186 418.075 li
437.186 421.075 li
437.936 421.075 li
437.936 415.825 mo
437.936 412.825 li
437.186 412.825 li
437.186 415.825 li
437.936 415.825 li
437.936 410.575 mo
437.936 407.575 li
437.186 407.575 li
437.186 410.575 li
437.936 410.575 li
437.936 405.325 mo
437.936 402.325 li
437.186 402.325 li
437.186 405.325 li
437.936 405.325 li
437.936 400.075 mo
437.936 397.075 li
437.186 397.075 li
437.186 400.075 li
437.936 400.075 li
437.936 394.825 mo
437.936 391.825 li
437.186 391.825 li
437.186 394.825 li
437.936 394.825 li
437.936 389.575 mo
437.936 386.575 li
437.186 386.575 li
437.186 389.575 li
437.936 389.575 li
437.936 384.325 mo
437.936 381.325 li
437.186 381.325 li
437.186 384.325 li
437.936 384.325 li
437.936 379.075 mo
437.936 376.075 li
437.186 376.075 li
437.186 379.075 li
437.936 379.075 li
437.936 373.825 mo
437.936 370.825 li
437.186 370.825 li
437.186 373.825 li
437.936 373.825 li
437.936 368.575 mo
437.936 365.575 li
437.186 365.575 li
437.186 368.575 li
437.936 368.575 li
437.936 363.325 mo
437.936 360.325 li
437.186 360.325 li
437.186 363.325 li
437.936 363.325 li
437.936 358.075 mo
437.936 355.075 li
437.186 355.075 li
437.186 358.075 li
437.936 358.075 li
437.936 352.825 mo
437.936 349.825 li
437.186 349.825 li
437.186 352.825 li
437.936 352.825 li
437.936 347.575 mo
437.936 344.575 li
437.186 344.575 li
437.186 347.575 li
437.936 347.575 li
437.936 342.325 mo
437.936 339.325 li
437.186 339.325 li
437.186 342.325 li
437.936 342.325 li
437.936 337.075 mo
437.936 334.075 li
437.186 334.075 li
437.186 337.075 li
437.936 337.075 li
437.936 331.825 mo
437.936 328.825 li
437.186 328.825 li
437.186 331.825 li
437.936 331.825 li
437.936 326.575 mo
437.936 323.575 li
437.186 323.575 li
437.186 326.575 li
437.936 326.575 li
437.936 321.325 mo
437.936 318.325 li
437.186 318.325 li
437.186 321.325 li
437.936 321.325 li
437.936 316.075 mo
437.936 313.075 li
437.186 313.075 li
437.186 316.075 li
437.936 316.075 li
437.936 310.825 mo
437.936 307.825 li
437.186 307.825 li
437.186 310.825 li
437.936 310.825 li
437.936 305.575 mo
437.936 304.306 li
440.561 304.306 li
440.561 303.556 li
437.561 303.556 li
437.462 303.556 437.366 303.596 437.296 303.666 cv
437.226 303.736 437.186 303.832 437.186 303.931 cv
437.186 305.575 li
437.936 305.575 li
.750271 .679713 .654902 .901945 cmyk
f
46.3327 111.06 mo
46.3327 107.511 49.2094 104.635 52.758 104.635 cv
149.844 104.635 li
151.549 104.635 153.183 105.312 154.388 106.517 cv
155.593 107.722 156.27 109.356 156.27 111.06 cv
156.27 136.761 li
156.27 140.309 153.393 143.186 149.844 143.186 cv
52.758 143.186 li
49.2094 143.186 46.3327 140.309 46.3327 136.761 cv
46.3327 111.06 li
0 0 0 0 cmyk
f
46.3327 111.06 mo
46.7076 111.06 li
46.7078 109.388 47.3842 107.878 48.4797 106.782 cv
49.5759 105.686 51.0861 105.01 52.758 105.01 cv
149.844 105.01 li
151.449 105.01 152.988 105.647 154.123 106.782 cv
155.257 107.917 155.895 109.456 155.895 111.06 cv
155.895 136.761 li
155.894 138.433 155.218 139.943 154.123 141.039 cv
153.027 142.134 151.516 142.811 149.844 142.811 cv
52.758 142.811 li
51.0861 142.811 49.5759 142.134 48.4797 141.039 cv
47.3842 139.943 46.7078 138.433 46.7076 136.761 cv
46.7076 111.06 li
46.3327 111.06 li
45.9577 111.06 li
45.9577 136.761 li
45.9578 140.517 49.0021 143.561 52.758 143.561 cv
149.844 143.561 li
153.6 143.561 156.644 140.517 156.645 136.761 cv
156.645 111.06 li
156.645 109.257 155.928 107.527 154.653 106.252 cv
153.377 104.976 151.648 104.26 149.844 104.26 cv
52.758 104.26 li
49.0021 104.26 45.9578 107.304 45.9577 111.06 cv
46.3327 111.06 li
.750271 .679713 .654902 .901945 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Arial-BoldMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PBAAAA+Arial-BoldMT)
%%Title: (PBAAAA+Arial-BoldMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PBAAAA+Arial-BoldMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-628 -376 2000 1018} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 3417 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 11 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A93
6AA182F5809A9> |
58 <001C60D8A8C9B5D6EF426B7217FEEEE61F478CB0D93BCB9F5136FC9DE881
530058B00EED488C98C725E7D087D1A690AB16A11F6F46409BFE58D76932B9B2
0729CB> |
68 <001C60D8A8C9B7EF322B767253CD3BE18E6883E9BFEE680E471A3E543E6B
629FFE599C78BF6E9BC360B4FD3F4193BE88F8A133134BAA650EBC31A9DBCA73
D443463241F1A95A036612031AED6950283B0D14D29C497685C55C7946BF118B
40E370FC30C35C6DDC0B89863AEC8E7000DED8B394346462262BD43999923C02
BB76E45D38F5FACA7247DBA2EBA6371EEFDE7DB20E4C849532AD601D5FE565E2
F9524F3166F0EDA1C9CBD6F2D9FAE6CBD991E5FC9CACD3E5ACCC612FA46CAB68
3778C9E93119C2E309BBBA2FB6B108D4ACC24630A4E27912F2F48E37DD6F256C
920ECC30772CD6DD1CCCB84D330E3FAA> |
76 <001C60D8A8C9B854D0F456B21D2F64F910BA7B8B592C84A4B1CA21D58F66
78BEC800D8864E53D53A> |
87 <001C60D8A8C9B81F2C3AD0BF8CA40D7105A9B3D27345F202DEBDE44606EF
D0E90137AE13DC9D19FB7B4ABCA40FDADEB59FF02A690A47D6F26E8BDAADCFC0
513C14FCD80BF39C6AFCEFE1132622D45FBB576E32F86682C5BCCAD00B4E7E37
5350009EFCA5AC835906F56B697B29> |
81 <001C60D8A8C9B7D8BE193B13518E6892DBA9B266D0A17D5C8CBB8FCA3DEC
31FFDE21FB19188C5C709BB859EE16635D8123C09E9F6380448F624FEDEAFC78
CB8E4436A865BB0CB81152FE1F90E6EB1DE7D9B62F15D5F2855507D6B695B1CC
6AFD11F003818163793142F6A0F46BD84EFADF> |
74 <001C60D8A8C9B7D8BE2780ECF91BB8FE73517B0190DDC8DBC9897295332E
6D8EF13268DE217D7EA63F2C2488BA6624154001DFCD86A24A51CFE6922F8614
F4FD4481342B3992244B419F0D448BA14CBCD530939FD538BD00615A031E3CBF
1609B0E4C3D7F5A051C575D052C1A51F88B318CA9D0C7CFDFA53AA8FB2F2EE27
4EE2F4C85657CA9E748262BB03EF446591D320994414EE439D72B9883F38366A
41CF501DCE32006C591422CCF439307E4D3088D90FF7CD2955301C96A46D1D15
45AF9D499025D541CB2077BD42919F91257F222D868E80527F0D65> |
3 <001C60D8A8C9B854D00D> |
54 <001C60D8A8C9B64EDFF4DB3154EF1496D6E24F0CAC281A26842F99825759
7280DD1E6498DF18A9DA7D721D169321D8C5E0431AC7382FA4310DC48BBF7871
0C6BC5247040A24ACAC01421F5FBDE686580BE547F54A1AA74DC005E8E5CD476
A95687DB199C1234EC19B3DCC9809D20AF7E582B47F9C3146B190D9EA96357C8
C75B37ED0E8A0609D6AA98D6ECE5CCE67035EEBD2539BAF0BB0A05B823E40DDA
E9B8EE162F6E47FABB31D9FF0B75F8D71F52C148E77FE80FB24454F3884141B0
09620C0B57EC496B1B9A1D8EA8A41DD33836FFD894AD961F351294F76A> |
72 <001C60D8A8C9B7EF322BF270AB151730C1576B3DBF6DAC6B05EF7C7C2AC3
550E4D7D76EEB5EC00E2AE0B63EA674701E41362C9EF4C943E6044930A81C028
8C730E9CD4222EC82D37FE43450E9A846C17FEBAA9742B3180B655FFA4E0E014
EF214E09E7DE6E45A7476C6DEA21B47E198DDC2AD648DA39E6CBF2981071855A
A94524E4E0809AB2B25573430347DD> |
16 <001C60D8A8C9B81F2C3A6131F04EDA09D4A0094DA9D5AC81D0> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PBAAAA+Arial-BoldMT-Identity-H /Identity-H 0 [/PBAAAA+Arial-BoldMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/QYTQWY+Arial-BoldMT /PBAAAA+Arial-BoldMT-Identity-H findfont ct_VMDictPut
QYTQWY+Arial-BoldMT [14 0 0 -14 0 0 ]msf
76.0428 120.85 mo
(\000:\000D\000L\000W\000L\000Q\000J\000\003)
[13.2019 7.784 3.8779 4.6619 3.8779 8.54001 8.54001 0 ]xsh
73.7028 137.35 mo
(\0006\000W\000D\000J\000H\000\020\000L\000Q)
[9.32401 4.6619 7.784 8.54001 7.784 4.6619 3.8779 0 ]xsh
277.252 111.06 mo
277.252 107.511 280.129 104.635 283.677 104.635 cv
380.764 104.635 li
382.468 104.635 384.102 105.312 385.307 106.517 cv
386.512 107.722 387.189 109.356 387.189 111.06 cv
387.189 136.761 li
387.189 140.309 384.312 143.186 380.764 143.186 cv
283.677 143.186 li
280.129 143.186 277.252 140.309 277.252 136.761 cv
277.252 111.06 li
0 0 0 0 cmyk
f
277.252 111.06 mo
277.627 111.06 li
277.627 109.388 278.303 107.878 279.399 106.782 cv
280.495 105.686 282.005 105.01 283.677 105.01 cv
380.763 105.01 li
382.368 105.01 383.907 105.647 385.042 106.782 cv
386.176 107.917 386.814 109.456 386.814 111.06 cv
386.814 136.761 li
386.814 138.433 386.137 139.943 385.042 141.039 cv
383.946 142.134 382.436 142.811 380.763 142.811 cv
283.677 142.811 li
282.005 142.811 280.495 142.134 279.399 141.039 cv
278.303 139.943 277.627 138.433 277.627 136.761 cv
277.627 111.06 li
277.252 111.06 li
276.877 111.06 li
276.877 136.761 li
276.877 140.517 279.921 143.561 283.677 143.561 cv
380.763 143.561 li
384.519 143.561 387.564 140.517 387.564 136.761 cv
387.564 111.06 li
387.564 109.257 386.848 107.527 385.572 106.252 cv
384.297 104.976 382.567 104.26 380.763 104.26 cv
283.677 104.26 li
279.921 104.26 276.877 107.304 276.877 111.06 cv
277.252 111.06 li
.750271 .679713 .654902 .901945 cmyk
f
.106294 1 1 .0484321 cmyk
QYTQWY+Arial-BoldMT [14 0 0 -14 0 0 ]msf
298.022 129.1 mo
(\0006\000W\000D\000J\000L\000Q\000J\000\020\000L\000Q)
[9.32401 4.6619 7.784 8.54001 3.8779 8.54001 8.54001 4.66187 3.8779 0 ]xsh
491.195 195.663 mo
491.195 192.114 494.072 189.237 497.62 189.237 cv
594.706 189.237 li
596.411 189.237 598.045 189.914 599.25 191.119 cv
600.455 192.324 601.132 193.958 601.132 195.663 cv
601.132 221.363 li
601.132 224.912 598.255 227.788 594.706 227.788 cv
497.62 227.788 li
494.072 227.788 491.195 224.912 491.195 221.363 cv
491.195 195.663 li
0 0 0 0 cmyk
f
491.195 195.663 mo
491.57 195.663 li
491.57 193.99 492.246 192.48 493.342 191.384 cv
494.438 190.289 495.948 189.612 497.62 189.612 cv
594.706 189.612 li
596.311 189.612 597.85 190.25 598.985 191.384 cv
600.119 192.519 600.757 194.058 600.757 195.663 cv
600.757 221.363 li
600.756 223.035 600.08 224.545 598.985 225.641 cv
597.889 226.737 596.378 227.413 594.706 227.413 cv
497.62 227.413 li
495.948 227.413 494.438 226.737 493.342 225.641 cv
492.246 224.545 491.57 223.035 491.57 221.363 cv
491.57 195.663 li
491.195 195.663 li
490.82 195.663 li
490.82 221.363 li
490.82 225.119 493.864 228.163 497.62 228.163 cv
594.706 228.163 li
598.462 228.163 601.506 225.119 601.507 221.363 cv
601.507 195.663 li
601.507 193.859 600.79 192.129 599.515 190.854 cv
598.24 189.579 596.51 188.862 594.706 188.862 cv
497.62 188.862 li
493.864 188.862 490.82 191.907 490.82 195.663 cv
491.195 195.663 li
.750271 .679713 .654902 .901945 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Arial-BoldMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+Arial-BoldMT 2 GetGlyphDirectory
53 <001C60D8A8C9B6079F62C490F8C1A9447E753B366F00BE2E6D6A1AEC57FE
FC5F04FB7246489EDF70068115D0A2805C8D6EC79F6064E7969601096F448222
EBB1DD7F1F6323EF89F566062038A8AC4D6CAD80E8B896F19CFFFE99D83DBA0C
0E40A706B7FE43A7E0AA62F51DDB688D792B5246324FF62981CEA7E6D7B38DF1
C5C95D599B2DC4BC9304A423DA3839EE77DFF504E2ADB006C72F6FEA3F44E88D
7A> |
88 <001C60D8A8C9B7D8BE193D97D4CEC9E264886B4FEB6039471A932F20C88E
939BABF490859EEC52AD38B7ED294F8DF2A47649EF77BF43349A736D065D0A25
3D952638D54F7BA1B47314F68FC1495C51454777F8F9475426838BE461BAFE9B
F3E443E03AAD9292AF57449A5275904AD9> |
!
end
end end
%ADOEndSubsetFont
QYTQWY+Arial-BoldMT [14 0 0 -14 0 0 ]msf
505.362 213.703 mo
(\000:\000D\000L\000W\000L\000Q\000J\000\003\0005\000X\000Q)
[13.2019 7.784 3.87787 4.66193 3.87787 8.54004 8.53998 3.87793 10.108 8.54004 0 ]xsh
491.195 457.946 mo
491.195 454.397 494.072 451.521 497.62 451.521 cv
594.706 451.521 li
596.411 451.521 598.045 452.198 599.25 453.403 cv
600.455 454.608 601.132 456.242 601.132 457.946 cv
601.132 483.646 li
601.132 487.195 598.255 490.072 594.706 490.072 cv
497.62 490.072 li
494.072 490.072 491.195 487.195 491.195 483.646 cv
491.195 457.946 li
0 0 0 0 cmyk
f
491.195 457.946 mo
491.57 457.946 li
491.57 456.274 492.246 454.764 493.342 453.668 cv
494.438 452.572 495.948 451.896 497.62 451.895 cv
594.706 451.895 li
596.311 451.895 597.85 452.533 598.985 453.668 cv
600.119 454.802 600.757 456.341 600.757 457.946 cv
600.757 483.646 li
600.756 485.318 600.08 486.829 598.985 487.925 cv
597.889 489.02 596.378 489.696 594.706 489.697 cv
497.62 489.697 li
495.948 489.696 494.438 489.02 493.342 487.925 cv
492.246 486.829 491.57 485.318 491.57 483.646 cv
491.57 457.946 li
491.195 457.946 li
490.82 457.946 li
490.82 483.646 li
490.82 487.402 493.864 490.446 497.62 490.447 cv
594.706 490.447 li
598.462 490.446 601.506 487.402 601.507 483.646 cv
601.507 457.946 li
601.507 456.142 600.79 454.413 599.515 453.137 cv
598.24 451.862 596.51 451.146 594.706 451.146 cv
497.62 451.146 li
493.864 451.146 490.82 454.19 490.82 457.946 cv
491.195 457.946 li
.750271 .679713 .654902 .901945 cmyk
f
.0583505 .508568 1 .000854505 cmyk
QYTQWY+Arial-BoldMT [14 0 0 -14 0 0 ]msf
517.8 475.986 mo
(\0005\000X\000Q\000Q\000L\000Q\000J)
[10.108 8.53998 8.54004 8.53998 3.87793 8.53998 0 ]xsh
278.037 548.247 mo
278.037 544.699 280.914 541.822 284.463 541.822 cv
381.549 541.822 li
383.253 541.822 384.887 542.499 386.092 543.704 cv
387.298 544.909 387.974 546.543 387.974 548.247 cv
387.974 573.948 li
387.974 577.496 385.098 580.373 381.549 580.373 cv
284.463 580.373 li
280.914 580.373 278.037 577.496 278.037 573.948 cv
278.037 548.247 li
0 0 0 0 cmyk
f
278.037 548.247 mo
278.412 548.247 li
278.412 546.575 279.089 545.065 280.184 543.969 cv
281.281 542.873 282.791 542.197 284.463 542.197 cv
381.549 542.197 li
383.154 542.197 384.693 542.834 385.827 543.969 cv
386.962 545.103 387.599 546.642 387.599 548.247 cv
387.599 573.948 li
387.599 575.62 386.923 577.13 385.827 578.226 cv
384.731 579.321 383.221 579.998 381.549 579.998 cv
284.463 579.998 li
282.791 579.998 281.281 579.321 280.184 578.226 cv
279.089 577.13 278.412 575.62 278.412 573.948 cv
278.412 548.247 li
278.037 548.247 li
277.662 548.247 li
277.662 573.948 li
277.663 577.703 280.707 580.748 284.463 580.748 cv
381.549 580.748 li
385.305 580.748 388.349 577.703 388.349 573.948 cv
388.349 548.247 li
388.349 546.443 387.633 544.714 386.357 543.438 cv
385.082 542.163 383.353 541.447 381.549 541.447 cv
284.463 541.447 li
280.707 541.447 277.663 544.491 277.662 548.247 cv
278.037 548.247 li
.750271 .679713 .654902 .901945 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Arial-BoldMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+Arial-BoldMT 1 GetGlyphDirectory
82 <001C60D8A8C9B7D8BE34A30C11766266259B98A0BA89715D82F7092153A6
228252D7594BDD75B2A7C57DC89088F8B1FFC43993725AE434A67B356F5F6B64
D528A1696640F00DD016EBC232B8C863EA85B4B724E805002B9447A61792050E
5F2AB51B8800BF6303526C74FB360B7027D54FFCEDAF13BF8EA7CB1A81691C0A
4FB25E1EA64C0904433C6A5F35BBF9DD5C4CBFC1A5> |
!
end
end end
%ADOEndSubsetFont
QYTQWY+Arial-BoldMT [14 0 0 -14 0 0 ]msf
307.747 558.037 mo
(\000:\000D\000L\000W\000L\000Q\000J\000\003)
[13.2019 7.784 3.8779 4.6619 3.8779 8.54001 8.54001 0 ]xsh
300.748 574.537 mo
(\0006\000W\000D\000J\000H\000\020\000R\000X\000W)
[9.32401 4.6619 7.784 8.54001 7.784 4.6619 8.54001 8.54001 0 ]xsh
51.5649 451.963 mo
51.5649 448.414 54.4416 445.537 57.9904 445.537 cv
155.077 445.537 li
156.781 445.537 158.415 446.214 159.62 447.419 cv
160.825 448.624 161.502 450.259 161.502 451.963 cv
161.502 477.663 li
161.502 481.212 158.625 484.089 155.077 484.089 cv
57.9904 484.089 li
54.4416 484.089 51.5649 481.212 51.5649 477.663 cv
51.5649 451.963 li
0 0 0 0 cmyk
f
51.5649 451.963 mo
51.9399 451.963 li
51.9402 450.291 52.6166 448.781 53.7121 447.684 cv
54.8081 446.589 56.3183 445.912 57.9902 445.912 cv
155.077 445.912 li
156.681 445.912 158.22 446.55 159.355 447.684 cv
160.489 448.819 161.127 450.358 161.127 451.963 cv
161.127 477.663 li
161.127 479.335 160.45 480.845 159.355 481.941 cv
158.259 483.037 156.749 483.713 155.077 483.713 cv
57.9902 483.713 li
56.3183 483.713 54.8081 483.037 53.7121 481.941 cv
52.6166 480.845 51.9402 479.335 51.9399 477.663 cv
51.9399 451.963 li
51.5649 451.963 li
51.1899 451.963 li
51.1899 477.663 li
51.1902 481.419 54.2344 484.463 57.9902 484.463 cv
155.077 484.463 li
158.832 484.463 161.877 481.419 161.877 477.663 cv
161.877 451.963 li
161.877 450.159 161.16 448.429 159.885 447.154 cv
158.61 445.879 156.88 445.162 155.077 445.162 cv
57.9902 445.162 li
54.2344 445.163 51.1902 448.207 51.1899 451.963 cv
51.5649 451.963 li
.750271 .679713 .654902 .901945 cmyk
f
.940581 .734279 0 0 cmyk
%ADOBeginSubsetFont: PBAAAA+Arial-BoldMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+Arial-BoldMT 2 GetGlyphDirectory
39 <001C60D8A8C9B6079F41181AF4EB36AA0D0A9CB43D77E9AB20A6E8CC956A
65DB49EB6635E16A93399048C7FF414644050887228FE6A7D0206D976F49A17D
261AA33D3EBB94BE961959DEF2B6629671CF61014D6F7BD7E457F47E2A8118C5
2D305371EF3BCBDE1CFFB87BA758D818C2C45B8180F337D5F9BDA254CBE936AE
CDBA1BA66E23577AFD9B2756741C424503> |
85 <001C60D8A8C9B7361F02EEC91E54B85D1C77E667FE2BCF3D09A421FBF63C
B630EA2A0B7B19FFD8078B4DB5A7731C633809BCAB3FF296D65B89F29DE6B6DB
35AA635F12FEC0F1664A8FB613C79352FA72> |
!
end
end end
%ADOEndSubsetFont
QYTQWY+Arial-BoldMT [14 0 0 -14 0 0 ]msf
64.9532 470.003 mo
(\000'\000U\000D\000L\000Q\000L\000Q\000J\000\020\000R\000X\000W)
[10.108 5.44611 7.784 3.8779 8.54002 3.8779 8.54 8.54001 4.6619 8.54001 8.54001 0 
]xsh
101.301 104.26 mo
101.301 104.26 li
101.301 86.6338 li
101.301 104.26 li
0 0 0 0 cmyk
f
101.301 104.634 mo
101.301 104.26 li
101.301 104.634 li
.750271 .679713 .654902 .901945 cmyk
f
99.8012 60.7913 mo
99.8012 86.6338 li
102.801 86.6338 li
102.801 60.7913 li
99.8012 60.7913 li
f
96.346 86.6339 mo
101.301 100.248 li
106.256 86.6339 li
cp
ef
3 lw
0 lc
0 lj
11.4737 ml
[] 0 dsh
true sadj
96.346 86.6339 mo
101.301 100.248 li
106.256 86.6339 li
cp
@
246.097 123.91 mo
156.645 123.91 li
246.097 123.91 li
0 0 0 0 cmyk
f
276.877 123.91 mo
246.847 123.91 li
276.877 123.91 li
.0523079 .75967 .593072 .00134279 cmyk
f
246.847 123.91 mo
246.097 123.91 li
246.847 123.91 li
.750271 .679713 .654902 .901945 cmyk
f
156.645 123.91 mo
156.27 123.91 li
156.645 123.91 li
f
277.262 123.91 mo
276.877 123.91 li
277.262 123.91 li
f
1 lj
14.3356 ml
156.27 123.91 mo
259.262 123.91 li
@
259.262 128.866 mo
272.876 123.91 li
259.262 118.955 li
cp
ef
0 lj
11.4737 ml
259.262 128.866 mo
272.876 123.91 li
259.262 118.955 li
cp
@
490.82 208.37 mo
379.92 162.79 li
490.82 208.37 li
0 0 0 0 cmyk
f
378.095 162.04 mo
378.095 162.04 li
333.133 143.561 li
378.095 162.04 li
.0523079 .75967 .593072 .00134279 cmyk
f
379.92 162.79 mo
379.92 162.79 li
378.095 162.04 li
379.92 162.79 li
.750271 .679713 .654902 .901945 cmyk
f
333.133 143.561 mo
333.133 143.561 li
332.221 143.186 li
333.133 143.561 li
f
491.197 208.525 mo
490.82 208.37 li
491.197 208.525 li
f
1 lj
14.3356 ml
332.22 143.186 mo
474.548 201.682 li
@
472.664 206.265 mo
487.14 206.857 li
476.432 197.099 li
cp
ef
0 lj
11.4737 ml
472.664 206.265 mo
487.14 206.857 li
476.432 197.099 li
cp
@
546.163 451.519 mo
546.163 451.519 li
546.163 451.519 li
546.163 451.519 li
f
544.663 361.779 mo
544.663 433.519 li
547.663 433.519 li
547.663 361.779 li
544.663 361.779 li
f
541.208 433.519 mo
546.163 447.133 li
551.118 433.519 li
541.208 433.519 li
ef
541.208 433.519 mo
539.799 434.032 li
546.163 451.519 li
553.261 432.019 li
539.066 432.019 li
539.799 434.032 li
541.208 433.519 li
541.208 435.019 li
548.976 435.019 li
546.163 442.747 li
542.618 433.006 li
541.208 433.519 li
541.208 435.019 li
541.208 433.519 li
f
341 538.235 mo
348.05 535.069 li
341 538.235 li
0 0 0 0 cmyk
f
491.195 470.796 mo
491.195 470.796 li
491.195 470.796 li
.750271 .679713 .654902 .901945 cmyk
f
490.58 469.428 mo
348.804 533.086 li
350.033 535.823 li
491.809 472.164 li
490.58 469.428 li
f
347.389 529.934 mo
336.999 540.031 li
351.448 538.975 li
cp
ef
347.389 529.934 mo
346.344 528.858 li
332.998 541.827 li
353.694 540.315 li
347.88 527.365 li
346.344 528.858 li
347.389 529.934 li
346.021 530.549 li
349.202 537.635 li
341 538.235 li
348.434 531.01 li
347.389 529.934 li
346.021 530.549 li
347.389 529.934 li
f
333.006 541.822 mo
333.006 541.822 li
333.006 541.822 li
333.006 541.822 li
f
177.93 472.187 mo
161.877 464.979 li
177.93 472.187 li
.592523 .2374 0 0 cmyk
f
161.877 464.979 mo
161.51 464.814 li
161.877 464.979 li
.750271 .679713 .654902 .901945 cmyk
f
333.62 540.453 mo
178.545 470.819 li
177.316 473.556 li
332.391 543.19 li
333.62 540.453 li
f
179.96 467.667 mo
165.511 466.611 li
175.901 476.708 li
cp
ef
179.96 467.667 mo
165.511 466.61 li
175.901 476.708 li
cp
@
156.27 60.7913 mo
102.801 60.7913 li
101.301 60.7913 li
99.8012 60.7913 li
46.3327 60.7913 li
46.3327 4.90154 li
156.27 4.90154 li
156.27 60.7913 li
0 0 0 0 cmyk
f
101.301 60.7913 mo
101.301 60.7913 li
f
102.801 60.7913 mo
99.8012 60.7913 li
101.301 60.7913 li
102.801 60.7913 li
.750271 .679713 .654902 .901945 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: HIBBAA+ArialMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HIBBAA+ArialMT)
%%Title: (HIBBAA+ArialMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HIBBAA+ArialMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-665 -325 2000 1006} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 3417 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 8 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A93
6AA182F5809A9> |
86 <001C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B
5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214
E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEAB
D96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046
E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB
3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8
435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F
4172D53C8FCAF4D28F2B78D3A4BF03> |
88 <001C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F
517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA
8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793
990906DA8D7F8ACFF6D70790F06B02> |
69 <001C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D
06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A
81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648C
F626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CA
DA1EAAF79B76AA2B52CCF0307B360E6D> |
80 <001C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519A
D5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD
99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176A
FB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D5
5C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE3
7B> |
76 <001C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B
171C8A80AB> |
87 <001C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D
065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349
CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB512
7F5C42C88FB43C> |
18 <001C60D8A8C9B854D0D18501A7E07A7DB7C8496D0849EBF5F0BA> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HIBBAA+ArialMT-Identity-H /Identity-H 0 [/HIBBAA+ArialMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/QYTQWZ+ArialMT /HIBBAA+ArialMT-Identity-H findfont ct_VMDictPut
QYTQWZ+ArialMT [14 0 0 -14 0 0 ]msf
53.0827 25.0916 mo
(\000V\000X\000E\000P\000L\000W\000\022)
[7 7.784 7.784 11.6619 3.108 3.8779 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+CourierNew-Bold-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (QJJAAA+CourierNew-Bold)
%%Title: (QJJAAA+CourierNew-Bold Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /QJJAAA+CourierNew-Bold def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-46 -359 702 1016} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 652 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 14 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7C3C9ED93FE91750F72DD53ADC388FD692A67FF166C34B93
6569DEC8D0785> |
72 <001C60D8A8C9B7C3C9ED9572D3A5DDFCAAE1193F8374A8F5161C1587B0E5
B80F15A03533D3D5AD526ECB0BE4794DB0CE0B6DD2F12300154BB57474845724
2407FA9213DCA4558556B3C041667363D1FA1775151F1FD538639231319618C1
60A4246468ED74FF468B1DAC183CA2DFE0ED766C629C26A959C8F515D040C451
E4E9F4FC8D3BBBBABD0801DF4673704DD3133C6591A3C0800DF10CF36C37311D
AA85DFC4E4EDE8F9D3D05095CA> |
81 <001C60D8A8C9B7C3C9FB8BA94958813D8AA97A08385DFFB3FE5FBB928C47
BA129ABD329A274A925F0DD1A152506E13516D3169CA5F00AF88C237EC869298
4906373C9AF539429208807A5332C78722CFD249B26455BF4C945BF33FA252D9
FC3253A7128AE82C23D9F537373FBE8BEA63234E2EB087EEFD8054A0AD49E328
41339BBE5B6C59131FD9287291DCFB26A54B421E628FB7449FB7D1A4E556C643
6C9993F412375A32633154552D49B5E28E048F0A9A4FBAF562A0F5F6423F2DEE
364401CF6225CDA3D29F61D8D51E1BFA254FBF04EFA4A6239CB2E65539EB53C3
953D0F80265EB4> |
84 <001C60D8A8C9B7C3C9ED931F7C15B62E014128216DE69BB7CE2A67A15B89
CCA9BF0A4950838CD22A442EDC8CF841754159FFC63AC525505D31B6FD186031
17B163D9DA5FF34B6F5BA5C166E6E89AC96EBB6FB4C237F1813768EC5E79A462
639472CD7E449612EC2FB2584AD9FFDDD98575932E12F1C9BA3878B434D80FCA
615B74AB1C59594E75AFC5F8967984F6BEBEDB7510ED44607C680A04D9C2BCBA
CD231D790FB0180D09DF4CC14FD0AB8C99D19750C21CAEDB64B445981C9AA99A
E2C98754E01F6A7D7D4DB8403D5D426CCFFB84FD7075A88A8420640BABF7CC0A
4402922F0C01AD4D18406A1668958A4B1813AB91DD> |
88 <001C60D8A8C9B7C3C9ED249F951ED964B33C256590EE9204B6D215372F4F
A5D46927E7F9301C9EE54F0738968258374DD83386D7C399C894D671748DC817
C81FB807CC7C048A00214969A66E2CE1C0C8BB3544627230EC74EF091252A3F6
4E10EC5F899C2D06B50BADE6B5D482B39DC346008060CD3F3102FDAD6705D970
4146B55FEA97F295BBB9C1A88408C270088C4BA39764C72009F457EE9D56FF40
38A129AC9A5B38299BE4CBCD83B61BD21FC93D430DE3C87475F536A6> |
11 <001C60D8A8C9B7C3C9E2FD698363DA9FF475C186E8CAE5B595FDCCDE2866
34BA306EA4646497FBCD97D225330B1E1B23C5B644486AD16982D798ADFD38BC
7326635B21610120AE416A8A909409E38B9F96EDEA4D30EEDDDDA3A1CB980D97
097449B904E7FC0F99C8C0B3D2C2BE49AC03F833BF07769743EDB9EDA7C4307C
2E96C8CF46521374E471A75B6BBAB8> |
52 <001C60D8A8C9B7C3C9EDA443CA1AE6A3012EECC556A942868EB59276839F
6F813E7B951630E14ACEFF3ADF570664663ABE69203F044D34960354F3E27B46
4EC4F3B2B1015983803516DD9BC85443AA0BB1C16C3080E5C60CE1DBDC550B64
D1A0A6DB94825FFE60BD1213C87B45CA2A4CCE9794A70CCBEC647351B9FBC569
7AFD893E9701651C7FB625379F825E19DE39153273B5733D0ACD561F774C1746
65EFAAEA107C981177772EF32D51702E96717984A8E819519C965FAC2A088554
321A13759A2F1EC01BD86E8949331713AA2BF23CF9BAA416F7F99C82C29DCED6
C071DCC39AA22308AF24EB38F28E5CF4C8533926> |
44 <001C60D8A8C9B7C3C9ED7E013C47E4EC66786A7649ACEEB568F033F08BC2
AF72CE033784C7519614488BD3C12A6A511702B9E3E54CB2B13E593C1E3EF708
E0048515FA2E54EE1C45C29BB7ED87C4A870F3D8722CA48272EB9C332627B65E
22A1C81D762E4A02AE9661DAF8E0A7E00061A86FC58DC9B5C5AA98D410456F87
EEDDFD6AF08028BD3D53D95FC59FDAA4C3419ED2> |
12 <001C60D8A8C9B7C3C9E29A13B79C0AACCC549F6AE0B5B8ABA019F16F11CD
EFE19BA522102DA05FDD8D945C8853EEFCCDD7A7B2276568397F6277A367F890
B82CDA7727327812BBC7A932A77EA8FDCD36B81519143E8F9A21C7D22CF2C762
C268FF5BABA350DDA9F3919C535277B2DC9DB1E484F56A246205B76332560CA8
27C053B71262A78B801A7F4FB7C2FEBC> |
86 <001C60D8A8C9B7C3C9ED14774ECA8F4A6506F6D11E97208AECCFE5608EFE
BC91A3743AAA6E037A28C6CDD58CE8CA6DC9A7B928D221DAD01C2717FAED6FE7
FAE42C5A71F0A44A3FE76DE1201122BD0E2152E2DC71E7B6A6BB51752B77C5FD
C885F386D18AF1161BD6D58CE7FFF575B385C914F13B5EF0D30BBD9D654DB012
744A8DB866953032DD7E0BA1D875D680494C87584B78BB2B89102584959F7230
1C168BC69E41A7DD0B580F284A530D94A62B9B969F54F2C52AE51CE4E4937293
D24E33CA86D9AEC51F09933EF2F153E6EA372C7A7F82C214AF1ADB55C90F5F79
DAE7C0646DDB92CA520421B0D54B9413A08361D579BDF2C1A433E7CCC8724562
77B46DC9946C51861B7E75766376453F6BA9C2754582ADA7DD6FE54FB0EC22C4
BDEF303079C4DA0F9175B2DF4D5FA0926F7D7D2454> |
70 <001C60D8A8C9B7C3C9ED3249A6269EEB9EF28F23EC037C11644992AA15C9
ECDDF407725E7B6C250EB68C40AC146AD6C02527486A48E542715E782A9BA702
4B8FB6B64882D30D26FD9B914E53210DC7390E45954633629766E637E5E6593F
823B76AE5BD930B386B7A6C0D262936176B72D1276FCEA82CC7351F5B25BCBC8
AB54FB18F999D8D4F9C9EFE8FF7B4552DE33A4B4365C8C114F3793CA68CA0E39
47B2EA4BCDFB014EA27A479762AB98C64FFE9480645897ACA9DA3E39CFBF342C
7EA6E813FDBFB97B51AE> |
75 <001C60D8A8C9B7C3C9CED3DC2B0BF640E8FB2D83E148BBE4A83E69B1FA9B
CEB8A2B09DDF83FB256ED16590D1CBCC2866CCCAACF7B3599F9E36CEB70DF6C3
A8B0ADB05842757A865D030650F9A63D2C57A0FA46B0406820B721A1EE569A11
764D810E321335591C0A39D3E53EADD1606DF8A6BAC13C37F18225A56CF9FF0A
F2A528CFF790AF3EF7124C48326A1FDC5314A4DC9A3F1993D4A180E356BE02BE
A2CFC42D912DB5AE6C2542B242AF77B9F7A7DBB9DD7756461C2CA87098103952
9EC93254F9AF5A1E5581199C8965FE4C7F31D05703B3AE0B7FAB20AB5E5E20BB
3BB7A16F345FDA1FC995DDC8B783DAB22A> |
71 <001C60D8A8C9B7C3C9ED19712DC1736C8714DF0CD0E989F38152E60DE72D
A355A96F4973A5EF65F68511C384ED1BFBF142FB7B190051D67033476CAD50FC
71DCF9DEAA78A2F250A6BAEFD4A0C75A0666B6851BEEF5CDAF6E23870452CADA
7714382E4003D08E1DF6D62C750C111D950B8CCAD1E79817ACBA5EC4C92941E0
AB25E3DE73BC8A51C8FD0EB4582091389F80481093643706B4B29C2BFDEA057E
4C73E40CA5EC916AB3CF34B6A82F831F38656B752976ECDA1F63EA403E17A8A8
26F6D4D72A132AE889F071F876A21F> |
79 <001C60D8A8C9B7C3C9E2774B9FBCB58D2BF1E5F84249990EDD8B99193398
4C8FB498E8DDB2C30DD605378AEB045810A9B576EF203894D8DB2487CFB581AB
9518C6E2596DC04BB8212189575172C31FCD1E3292A499F56EA39C0C23225E62
E81E713FBCEC9F270F148AC9AB5AAB98D1A2348BA28A5B> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /QJJAAA+CourierNew-Bold-Identity-H /Identity-H 0 [/QJJAAA+CourierNew-Bold] ct_ComposeFont pop end end
%ADOEndSubsetFont
/QYTQXA+CourierNew-Bold /QJJAAA+CourierNew-Bold-Identity-H findfont ct_VMDictPut
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
53.0827 41.5916 mo
(\000H\000Q\000T\000X\000H\000X\000H\000\013\0004)
[8.40008 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
128.653 46.8416 mo
(\000,)sh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
134.25 41.5916 mo
(\000\014)sh
53.0827 58.0916 mo
(\000V\000F\000K\000H\000G\000X\000O\000H\000\013\000\014)
[8.40008 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 8.40009 0 ]xsh
280.327 195.663 mo
151.02 195.663 li
151.02 143.46 li
154.215 142.903 156.644 140.116 156.645 136.761 cv
156.645 131.624 li
246.097 131.624 li
246.097 131.629 li
246.472 131.629 li
246.472 133.879 li
246.097 133.879 li
246.097 136.879 li
246.472 136.879 li
246.472 139.129 li
246.097 139.129 li
246.097 142.129 li
246.472 142.129 li
246.472 144.379 li
246.097 144.379 li
246.097 147.379 li
246.472 147.379 li
246.472 149.58 li
246.506 149.614 li
246.241 149.88 li
248.363 152.001 li
248.628 151.736 li
250.219 153.327 li
249.954 153.592 li
252.075 155.713 li
252.34 155.448 li
253.931 157.039 li
253.666 157.304 li
255.787 159.426 li
256.052 159.16 li
257.643 160.751 li
257.378 161.017 li
259.042 162.681 li
259.112 162.75 259.208 162.79 259.307 162.79 cv
259.954 162.79 li
259.954 162.415 li
262.204 162.415 li
262.204 162.79 li
265.204 162.79 li
265.204 162.415 li
267.454 162.415 li
267.454 162.79 li
270.454 162.79 li
270.454 162.415 li
272.704 162.415 li
272.704 162.79 li
275.704 162.79 li
275.704 162.415 li
277.954 162.415 li
277.954 162.79 li
280.327 162.79 li
280.327 195.663 li
0 0 0 0 cmyk
f
277.954 162.415 mo
275.704 162.415 li
275.704 162.04 li
272.704 162.04 li
272.704 162.415 li
270.454 162.415 li
270.454 162.04 li
267.454 162.04 li
267.454 162.415 li
265.204 162.415 li
265.204 162.04 li
262.204 162.04 li
262.204 162.415 li
259.954 162.415 li
259.954 162.04 li
259.463 162.04 li
257.909 160.486 li
257.643 160.751 li
256.052 159.16 li
256.317 158.895 li
254.196 156.774 li
253.931 157.039 li
252.34 155.448 li
252.605 155.183 li
250.484 153.062 li
250.219 153.327 li
248.628 151.736 li
248.893 151.471 li
246.772 149.349 li
246.506 149.614 li
246.472 149.58 li
246.472 147.379 li
246.847 147.379 li
246.847 144.379 li
246.472 144.379 li
246.472 142.129 li
246.847 142.129 li
246.847 139.129 li
246.472 139.129 li
246.472 136.879 li
246.847 136.879 li
246.847 133.879 li
246.472 133.879 li
246.472 131.629 li
246.847 131.629 li
246.847 131.624 li
276.877 131.624 li
276.877 136.761 li
276.877 139.298 278.267 141.511 280.327 142.68 cv
280.327 162.04 li
277.954 162.04 li
277.954 162.415 li
.0523079 .75967 .593072 .00134279 cmyk
f
280.327 162.79 mo
277.954 162.79 li
277.954 162.415 li
277.954 162.04 li
280.327 162.04 li
280.327 162.79 li
275.704 162.79 mo
272.704 162.79 li
272.704 162.415 li
272.704 162.04 li
275.704 162.04 li
275.704 162.415 li
275.704 162.79 li
270.454 162.79 mo
267.454 162.79 li
267.454 162.415 li
267.454 162.04 li
270.454 162.04 li
270.454 162.415 li
270.454 162.79 li
265.204 162.79 mo
262.204 162.79 li
262.204 162.415 li
262.204 162.04 li
265.204 162.04 li
265.204 162.415 li
265.204 162.79 li
259.954 162.79 mo
259.307 162.79 li
259.208 162.79 259.112 162.75 259.042 162.681 cv
257.378 161.017 li
257.643 160.751 li
257.909 160.486 li
259.463 162.04 li
259.954 162.04 li
259.954 162.415 li
259.954 162.79 li
255.787 159.426 mo
253.666 157.304 li
253.931 157.039 li
254.196 156.774 li
256.317 158.895 li
256.052 159.16 li
255.787 159.426 li
252.075 155.713 mo
249.954 153.592 li
250.219 153.327 li
250.484 153.062 li
252.605 155.183 li
252.34 155.448 li
252.075 155.713 li
248.363 152.001 mo
246.241 149.88 li
246.506 149.614 li
246.772 149.349 li
248.893 151.471 li
248.628 151.736 li
248.363 152.001 li
246.847 147.379 mo
246.472 147.379 li
246.097 147.379 li
246.097 144.379 li
246.472 144.379 li
246.847 144.379 li
246.847 147.379 li
246.847 142.129 mo
246.472 142.129 li
246.097 142.129 li
246.097 139.129 li
246.472 139.129 li
246.847 139.129 li
246.847 142.129 li
246.847 136.879 mo
246.472 136.879 li
246.097 136.879 li
246.097 133.879 li
246.472 133.879 li
246.847 133.879 li
246.847 136.879 li
246.847 131.629 mo
246.472 131.629 li
246.097 131.629 li
246.097 131.624 li
246.847 131.624 li
246.847 131.629 li
.750271 .679713 .654902 .901945 cmyk
f
151.02 142.697 mo
151.02 131.624 li
155.895 131.624 li
155.895 136.761 li
155.894 138.433 155.218 139.943 154.123 141.039 cv
153.29 141.871 152.219 142.461 151.02 142.697 cv
0 0 0 0 cmyk
f
151.02 143.46 mo
151.02 142.697 li
152.219 142.461 153.29 141.871 154.123 141.039 cv
155.218 139.943 155.894 138.433 155.895 136.761 cv
155.895 131.624 li
156.645 131.624 li
156.645 136.761 li
156.644 140.116 154.215 142.903 151.02 143.46 cv
.750271 .679713 .654902 .901945 cmyk
f
280.327 141.799 mo
279.993 141.577 279.682 141.322 279.399 141.039 cv
278.303 139.943 277.627 138.433 277.627 136.761 cv
277.627 131.624 li
280.327 131.624 li
280.327 141.799 li
0 0 0 0 cmyk
f
280.327 142.68 mo
278.267 141.511 276.877 139.298 276.877 136.761 cv
276.877 131.624 li
277.627 131.624 li
277.627 136.761 li
277.627 138.433 278.303 139.943 279.399 141.039 cv
279.682 141.322 279.993 141.577 280.327 141.799 cv
280.327 142.68 li
.750271 .679713 .654902 .901945 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: HIBBAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HIBBAA+ArialMT 5 GetGlyphDirectory
71 <001C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D962
1458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6
DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB6
12941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF
13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |
83 <001C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B9
6470F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F43633
0DC4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F5
56CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672
C1E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |
68 <001C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA
7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883
CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DB
BA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405
FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5
CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D
53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307
B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D1
77B5D88A> |
70 <001C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0ED
CE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9
F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF3414
8C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36
548FE63FC8465B1B685766E782F0> |
75 <001C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E
131450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD4
1AC970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2
DFA8> |
!
end
end end
%ADOEndSubsetFont
QYTQWZ+ArialMT [14 0 0 -14 0 0 ]msf
157.77 151.814 mo
(\000G\000L\000V\000S\000D\000W\000F\000K\000\022)
[7.784 3.10799 7 7.784 7.784 3.8779 7.00002 7.784 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+CourierNew-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/QJJAAA+CourierNew-Bold 9 GetGlyphDirectory
85 <001C60D8A8C9B7C3C9E269908BC028C7429479F7D6D2D539F32D3B586B3C
E25DF063792C7E6CD7BB71A4DDEE61E83F14E1BBB9696DDA5C31AA40838877C4
1AF9329304FD8A0673E65486E65C724D868E9F3FEDA0D6FC260C20070D14C5FC
9A82AB5573B4765C91325B5099A3E923801AFB8657B72696CAD25F4E41FC4021
2FA30617023B620DF1C54DE5999E39ABC6F8737ABC0385481B5CCEA6BF8CEE85
2AE085134EF145A3D4B77D6470F07420E6A7F308C03711098319DE179953> |
80 <001C60D8A8C9B7C3C9AD76A349A83A682C50B6F98E518FFF6EA4B8D41BBA
11C8E43732693D49311D5BB3606D208DAC74793D5C95EA1009AA9D77B586C257
D7EDC383DC31A2C5EF3B49B5BD17F386670A227EF22E2BA753C82DCC70FF4CCD
563D195689558B65EBDE518EB126BAD0C0ACC1F4BD559644A726C9391AFE7E82
CDAD234D192AF5EA979D1B672327B72AD2A2EED15C2D542DCEF1DDEBA7E01F7A
8757AFCBB0AB98075A410A4005F3C2868B67CFE067D0DAB12611472F4BF42E88
10DFEB192AC33E4466524B18A75C2339AF23CE191F99E0C3AEFEBF0D10415ED9
D78AE46D8561F8C5BDC84D99B9944AE603BFDFD2476C6444A71B369CD8D57865
67731B0B4396892BE945722233338931164E12D0373C74E339A9D8154E2CF41B
A1BC02D79BAB09> |
66 <001C60D8A8C9B7C3C9EC521F9464A14A936B3C1A7034A0C4E0D211EC555C
45809935E1786C372392B55083E5EED58887B6B96FC9ACCDF47CD0CEDA356CDE
D189553DAEF262DA47C3FBDE4539F91C> |
73 <001C60D8A8C9B7C3C9ED70589A5047497CE296F09A1F2CFA32C655741B0B
850CB808052FC8FCCD0548D5B50BCE429E3AC3D9ADDCF94A4D0367BE31352ABA
727EE68E192EF125B14C17BCEC26FA9CB73D0410FD7348AC05485DB7039D3878
128499A55443558FC09C72639A29B05089A06A7EA58B0C76374810B447A52351
FEC6D0C8B5BF82EF1B426407FA5213ED6C8A041A16DD9EDF98D8FABC4BF8C37E
A0BF3E54674B724F1507ABC84891DB3A46B25CA9D6D0C57064E17E47BBFCB241
88C0E24B6E02E7062987A8BBE937DFAC1CA7C1A405D24262E46374780A229193
E5877467AA27839F> |
82 <001C60D8A8C9B7C3C9ED8DE5417BC0622147CB023ED6CE4DEDAD41C388A6
10FC76B8A2BB6C9664E90F659E3501193FBE11C5A98DBCB9AF41621352E586F0
44428420B063714BC35274ECBBF581D2CA83D16EC335BC794A47F724E798D58D
25FA2B2CEB06DB19EFC6E63E0D28F042EB89D9678CC2E2B6DDDD957975F93BC6
E311AD3AE69856E499E48520DB8EA7424591C6CA65FC02FF866C1603AEA10DF2
79BC2546> |
68 <001C60D8A8C9B7C3C9EDA62C2C5C09C04438F068AE6A994F9A6DB568ECF2
19359E824B74A5361EC8EDBC3CFD04B42643F3C39B1E6D1760005B222B548521
1FF25233C47A21274256CFD79964C447E1AF87C5BF4A98FB7B581FA6A9A492C0
DA5AE908734EB0D7BD6A7434ACAF0024C8170F5F4BADC7FDDA393B72FAD4573E
25767E72B7F0148E237A8FDF9C9F9501B529F8FF3BDB2CFE6DAAD8435342D2BB
5A1D8FFBF137A9B8AB45F52F7BCD1DECFBB7D9273190F8D4E8242689914E76CA
F5B01E768B3B9560A72E860C2DE9382D200E598286021C4D02C2CB5065C72881
021ED213B2D622A41568CC450325586AAA8A34C1F18A> |
87 <001C60D8A8C9B7C3C9ED49CA3CE8CDCCE042E7850D0CC54895167E23E41A
965E670F9733DEE424BF5498CBBC29C0B0E61AFDF8FE9E8FCFCC174CBBB1AD15
2FEA29895F87ACD897B7A090ED24CC572271EB7D1E0523B1CC3248F8B016ABCE
437AE349E9F8972575E3F9DE1C7929E553DAF2368484D2E2ACBBEF9B09F509EB
17FAEADCCEDF7562C33ED09849E3826C3BEDAA17418FB2F20EE9476302AF1E21
53243B4111422CB78EE2D670CFF0123FC564307791575F67C4294EA20794BF17
FE58C9AB> |
37 <001C60D8A8C9B7C3C9CEC592534D2D421EB54F70724F6809FD7CBCF5A957
AFA8DF853CDD5B6C589B85501D9015B686F22FF30FD82BC881DDC72C2F5B1E43
20004D87D80B7FFA7D16CBE49B24A4AA22BC2E2C37AF3D869ED101CE023FB6BE
2EE73C0800099D8E6530914AAF5679522EA06B93B8F42051515DF4A334691E85
38DDF4DC6FAEC8C7C0D7C8BF69EBE9F619233264ADA2E9CE76F6BC44395C1905
838622054575E795F8C96A574FCFECC6ABB82A7BCB0A321B188D31745225DF30
0088BF3917FC19A588E2D6A15A80E03FE09C5AFD766585E8833EB308207B83A9
109EF5F06B> |
76 <001C60D8A8C9B7C3C9E227C9E6E4277389ACA636BA71B2222A0E55B695FF
46E8B628876DF912831AEDB2A238AADCEBB7161CADEC77AA0D28AAB6118C61F1
47D10E3BF8983A3E8DBB02081823539185406B9472DFC3FA38B5D05759DB0162
AD6EC35085212261C1032D0B8A61313EF37721D7E1DAB8269DA106EB9C5E55A3
6D67647E> |
!
end
end end
%ADOEndSubsetFont
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
157.77 168.314 mo
(\000U\000P\000B\000I\000U\000R\000P\000\013\0004)
[8.40007 8.40009 8.4001 8.40007 8.40009 8.4001 8.40007 8.40009 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
233.34 173.564 mo
(\000,)sh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
238.937 168.314 mo
(\000\014)sh
157.77 184.814 mo
(\000D\000O\000O\000R\000F\000D\000W\000H\000\013\000%\000%)
[8.40007 8.40009 8.4001 8.40007 8.40009 8.4001 8.40007 8.40009 8.4001 8.40007 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
250.133 190.064 mo
(\000L\000Q)
[5.60005 0 ]xsh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
261.329 184.814 mo
(\000\014)sh
553.429 172.795 mo
443.492 172.795 li
443.492 130.701 li
553.429 130.701 li
553.429 172.795 li
0 0 0 0 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: HIBBAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HIBBAA+ArialMT 2 GetGlyphDirectory
73 <001C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C
5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61
CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |
81 <001C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A28
5C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCD
ADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5
203A8015DD09B7CE> |
!
end
end end
%ADOEndSubsetFont
QYTQWZ+ArialMT [14 0 0 -14 0 0 ]msf
450.242 150.891 mo
(\000I\000L\000Q\000L\000V\000K\000\022)
[3.8779 3.10797 7.784 3.108 7.00003 7.784 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+CourierNew-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/QJJAAA+CourierNew-Bold 1 GetGlyphDirectory
53 <001C60D8A8C9B7C3C9E2F6EDB8B3CDD2C2C5D078FE9B9541ED10128FAA84
20A5E8AC885BDA761917A81C20043DBA78C8070B1D4421D81FF49A73BFB5CBC5
0EC4D8F14A4BD201133FD69BF34DF31AF5F7C97FA3A00D00933433095ED7F230
14BD631EEA2F21A83C431A1FD3DEFA2EF6F6BF119F1846909147B7449B31494E
90867208DA1B51C95328A2FBF54491D9EFF63E2A6C195760522C32A38AD03585
F2B4CC200219D458988FDD5C0F45D800F86A25DADC969CD3AD5EF65BCC6049F1
4AE3949D5319B83E394F0672F4BF3199816E4C6A355CB3A2EC5F2E17649AC89A
D3A13B5FF5B9E378F894AEA59FBA253731B13A90> |
!
end
end end
%ADOEndSubsetFont
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
450.242 167.391 mo
(\000H\000Q\000T\000X\000H\000X\000H\000\013\0004)
[8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 8.40005 8.40005 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
525.812 172.641 mo
(\0005)sh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
531.41 167.391 mo
(\000\014)sh
557.224 303.931 mo
556.061 303.931 li
556.061 303.556 li
553.061 303.556 li
553.061 303.931 li
550.811 303.931 li
550.811 303.556 li
547.811 303.556 li
547.811 303.931 li
546.163 303.931 li
546.163 239.992 li
557.224 239.992 li
557.224 303.931 li
0 0 0 0 cmyk
f
557.224 311.024 mo
546.163 311.024 li
546.163 303.931 li
547.811 303.931 li
547.811 304.306 li
550.811 304.306 li
550.811 303.931 li
553.061 303.931 li
553.061 304.306 li
556.061 304.306 li
556.061 303.931 li
557.224 303.931 li
557.224 311.024 li
.00393683 .347387 .705714 0 cmyk
f
556.061 304.306 mo
553.061 304.306 li
553.061 303.931 li
553.061 303.556 li
556.061 303.556 li
556.061 303.931 li
556.061 304.306 li
550.811 304.306 mo
547.811 304.306 li
547.811 303.931 li
547.811 303.556 li
550.811 303.556 li
550.811 303.931 li
550.811 304.306 li
.750271 .679713 .654902 .901945 cmyk
f
437.561 311.024 mo
398.248 311.024 li
398.248 239.992 li
546.163 239.992 li
546.163 303.931 li
545.561 303.931 li
545.561 303.556 li
542.561 303.556 li
542.561 303.931 li
540.311 303.931 li
540.311 303.556 li
537.311 303.556 li
537.311 303.931 li
535.061 303.931 li
535.061 303.556 li
532.061 303.556 li
532.061 303.931 li
529.811 303.931 li
529.811 303.556 li
526.811 303.556 li
526.811 303.931 li
524.561 303.931 li
524.561 303.556 li
521.561 303.556 li
521.561 303.931 li
519.311 303.931 li
519.311 303.556 li
516.311 303.556 li
516.311 303.931 li
514.061 303.931 li
514.061 303.556 li
511.061 303.556 li
511.061 303.931 li
508.811 303.931 li
508.811 303.556 li
505.811 303.556 li
505.811 303.931 li
503.561 303.931 li
503.561 303.556 li
500.561 303.556 li
500.561 303.931 li
498.311 303.931 li
498.311 303.556 li
495.311 303.556 li
495.311 303.931 li
493.061 303.931 li
493.061 303.556 li
490.061 303.556 li
490.061 303.931 li
487.811 303.931 li
487.811 303.556 li
484.811 303.556 li
484.811 303.931 li
482.561 303.931 li
482.561 303.556 li
479.561 303.556 li
479.561 303.931 li
477.311 303.931 li
477.311 303.556 li
474.311 303.556 li
474.311 303.931 li
472.061 303.931 li
472.061 303.556 li
469.061 303.556 li
469.061 303.931 li
466.811 303.931 li
466.811 303.556 li
463.811 303.556 li
463.811 303.931 li
461.561 303.931 li
461.561 303.556 li
458.561 303.556 li
458.561 303.931 li
456.311 303.931 li
456.311 303.556 li
453.311 303.556 li
453.311 303.931 li
451.061 303.931 li
451.061 303.556 li
448.061 303.556 li
448.061 303.931 li
445.811 303.931 li
445.811 303.556 li
442.811 303.556 li
442.811 303.931 li
440.561 303.931 li
440.561 303.556 li
437.561 303.556 li
437.462 303.556 437.366 303.596 437.296 303.666 cv
437.226 303.736 437.186 303.832 437.186 303.931 cv
437.186 305.575 li
437.561 305.575 li
437.561 307.825 li
437.186 307.825 li
437.186 310.825 li
437.561 310.825 li
437.561 311.024 li
0 0 0 0 cmyk
f
546.163 311.024 mo
437.561 311.024 li
437.561 310.825 li
437.936 310.825 li
437.936 307.825 li
437.561 307.825 li
437.561 305.575 li
437.936 305.575 li
437.936 304.306 li
440.561 304.306 li
440.561 303.931 li
442.811 303.931 li
442.811 304.306 li
445.811 304.306 li
445.811 303.931 li
448.061 303.931 li
448.061 304.306 li
451.061 304.306 li
451.061 303.931 li
453.311 303.931 li
453.311 304.306 li
456.311 304.306 li
456.311 303.931 li
458.561 303.931 li
458.561 304.306 li
461.561 304.306 li
461.561 303.931 li
463.811 303.931 li
463.811 304.306 li
466.811 304.306 li
466.811 303.931 li
469.061 303.931 li
469.061 304.306 li
472.061 304.306 li
472.061 303.931 li
474.311 303.931 li
474.311 304.306 li
477.311 304.306 li
477.311 303.931 li
479.561 303.931 li
479.561 304.306 li
482.561 304.306 li
482.561 303.931 li
484.811 303.931 li
484.811 304.306 li
487.811 304.306 li
487.811 303.931 li
490.061 303.931 li
490.061 304.306 li
493.061 304.306 li
493.061 303.931 li
495.311 303.931 li
495.311 304.306 li
498.311 304.306 li
498.311 303.931 li
500.561 303.931 li
500.561 304.306 li
503.561 304.306 li
503.561 303.931 li
505.811 303.931 li
505.811 304.306 li
508.811 304.306 li
508.811 303.931 li
511.061 303.931 li
511.061 304.306 li
514.061 304.306 li
514.061 303.931 li
516.311 303.931 li
516.311 304.306 li
519.311 304.306 li
519.311 303.931 li
521.561 303.931 li
521.561 304.306 li
524.561 304.306 li
524.561 303.931 li
526.811 303.931 li
526.811 304.306 li
529.811 304.306 li
529.811 303.931 li
532.061 303.931 li
532.061 304.306 li
535.061 304.306 li
535.061 303.931 li
537.311 303.931 li
537.311 304.306 li
540.311 304.306 li
540.311 303.931 li
542.561 303.931 li
542.561 304.306 li
545.561 304.306 li
545.561 303.931 li
546.163 303.931 li
546.163 311.024 li
.00393683 .347387 .705714 0 cmyk
f
437.936 310.825 mo
437.561 310.825 li
437.186 310.825 li
437.186 307.825 li
437.561 307.825 li
437.936 307.825 li
437.936 310.825 li
437.936 305.575 mo
437.561 305.575 li
437.186 305.575 li
437.186 303.931 li
437.186 303.832 437.226 303.736 437.296 303.666 cv
437.366 303.596 437.462 303.556 437.561 303.556 cv
440.561 303.556 li
440.561 303.931 li
440.561 304.306 li
437.936 304.306 li
437.936 305.575 li
545.561 304.306 mo
542.561 304.306 li
542.561 303.931 li
542.561 303.556 li
545.561 303.556 li
545.561 303.931 li
545.561 304.306 li
540.311 304.306 mo
537.311 304.306 li
537.311 303.931 li
537.311 303.556 li
540.311 303.556 li
540.311 303.931 li
540.311 304.306 li
535.061 304.306 mo
532.061 304.306 li
532.061 303.931 li
532.061 303.556 li
535.061 303.556 li
535.061 303.931 li
535.061 304.306 li
529.811 304.306 mo
526.811 304.306 li
526.811 303.931 li
526.811 303.556 li
529.811 303.556 li
529.811 303.931 li
529.811 304.306 li
524.561 304.306 mo
521.561 304.306 li
521.561 303.931 li
521.561 303.556 li
524.561 303.556 li
524.561 303.931 li
524.561 304.306 li
519.311 304.306 mo
516.311 304.306 li
516.311 303.931 li
516.311 303.556 li
519.311 303.556 li
519.311 303.931 li
519.311 304.306 li
514.061 304.306 mo
511.061 304.306 li
511.061 303.931 li
511.061 303.556 li
514.061 303.556 li
514.061 303.931 li
514.061 304.306 li
508.811 304.306 mo
505.811 304.306 li
505.811 303.931 li
505.811 303.556 li
508.811 303.556 li
508.811 303.931 li
508.811 304.306 li
503.561 304.306 mo
500.561 304.306 li
500.561 303.931 li
500.561 303.556 li
503.561 303.556 li
503.561 303.931 li
503.561 304.306 li
498.311 304.306 mo
495.311 304.306 li
495.311 303.931 li
495.311 303.556 li
498.311 303.556 li
498.311 303.931 li
498.311 304.306 li
493.061 304.306 mo
490.061 304.306 li
490.061 303.931 li
490.061 303.556 li
493.061 303.556 li
493.061 303.931 li
493.061 304.306 li
487.811 304.306 mo
484.811 304.306 li
484.811 303.931 li
484.811 303.556 li
487.811 303.556 li
487.811 303.931 li
487.811 304.306 li
482.561 304.306 mo
479.561 304.306 li
479.561 303.931 li
479.561 303.556 li
482.561 303.556 li
482.561 303.931 li
482.561 304.306 li
477.311 304.306 mo
474.311 304.306 li
474.311 303.931 li
474.311 303.556 li
477.311 303.556 li
477.311 303.931 li
477.311 304.306 li
472.061 304.306 mo
469.061 304.306 li
469.061 303.931 li
469.061 303.556 li
472.061 303.556 li
472.061 303.931 li
472.061 304.306 li
466.811 304.306 mo
463.811 304.306 li
463.811 303.931 li
463.811 303.556 li
466.811 303.556 li
466.811 303.931 li
466.811 304.306 li
461.561 304.306 mo
458.561 304.306 li
458.561 303.931 li
458.561 303.556 li
461.561 303.556 li
461.561 303.931 li
461.561 304.306 li
456.311 304.306 mo
453.311 304.306 li
453.311 303.931 li
453.311 303.556 li
456.311 303.556 li
456.311 303.931 li
456.311 304.306 li
451.061 304.306 mo
448.061 304.306 li
448.061 303.931 li
448.061 303.556 li
451.061 303.556 li
451.061 303.931 li
451.061 304.306 li
445.811 304.306 mo
442.811 304.306 li
442.811 303.931 li
442.811 303.556 li
445.811 303.556 li
445.811 303.931 li
445.811 304.306 li
.750271 .679713 .654902 .901945 cmyk
f
.750271 .679713 .654902 .901945 cmyk
QYTQWZ+ArialMT [14 0 0 -14 0 0 ]msf
404.998 260.182 mo
(\000G\000L\000V\000S\000D\000W\000F\000K\000\022)
[7.784 3.10797 7 7.784 7.784 3.8779 7.00003 7.784 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+CourierNew-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/QJJAAA+CourierNew-Bold 3 GetGlyphDirectory
15 <001C60D8A8C9B7C3C9E229369DF62DF2C8F74867D815D77D34D571FEEBC9
2DB98EA0F3E0B307336AF933CECD7A6731FCF7DB3053> |
38 <001C60D8A8C9B7C3C9ED3FD40993F82868FDBFC96A0D02A1328C16B608E5
5DCC6CE14E2F0992D88C312DA94DE46E3E8F4C65D43857854F4D09676A1CECDC
9E4CEA0208602E02CC3C1DD87CAD46E81B97E6A533A32AD401CAEA123A79D769
BC9B81EB761E1BFD65479D00AF3D5FE3B5EF8C7E888D839B7DD64D0133F7B87B
E060883C9BCBAD2F4DEC2935A6E511758B693624AA6C4698E31B8C53D40E59B3
9E3074E37FFC11D874FA30E743D5EC9BC0B63CFCA0AC98A3EB3B99F157D28F8A
7DEC3F9D3EC89EBDCAA177BE203B567C18D8426A732129D9A30CCF7C7AF53B8C
1ED3DF3429A360C7C4F32185178A858DFDA8AE1B688193302FBEEAF9659443> |
49 <001C60D8A8C9B7C3C9ED6C6096EA68A628C1D2D4A2F7F464438E282A4801
A888FB01D6F95E0BC7316DB3EA36AD740126129A9D0BC45A21C14925255AB666
A2BF2BF16660DF3DE1F4E952CBC3ACCD5F798F7E41E76FEEE5BEA54400EEC067
93C1389C4D0BBAACE271E293F019FC62359CE8AA686F2D8D7B17CC9A3638A55F
DE0C84464FB07CB9AC3E9E8E3CE5E41A13FF03BE7F030F7B3A28C673A6D20D2C
CA6111351BB0A0C25EF1D3E03B1459E16004A2C09DC7614D8F6AB60518AC> |
!
end
end end
%ADOEndSubsetFont
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
404.998 276.682 mo
(\000U\000P\000B\000I\000U\000R\000P\000\013\0004)
[8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 8.40005 8.40009 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
480.568 281.932 mo
(\0005)sh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
486.166 276.682 mo
(\000\014)sh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
494.563 281.932 mo
(\000\017)sh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
404.998 293.182 mo
(\000D\000O\000O\000R\000F\000D\000W\000H\000\013\000&\0001\000\017\000%\000%)
[8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 
8.40005 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
522.552 298.432 mo
(\000U\000X\000Q)
[5.60004 5.60004 0 ]xsh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
539.345 293.182 mo
(\000\014)sh
539.093 589.386 mo
407.778 589.386 li
407.778 509.895 li
417.295 505.622 li
470.651 505.622 li
470.911 505.881 li
470.981 505.952 471.076 505.991 471.176 505.991 cv
472.461 505.991 li
472.461 505.622 li
474.711 505.622 li
474.711 505.991 li
477.711 505.991 li
477.711 505.622 li
479.961 505.622 li
479.961 505.991 li
482.961 505.991 li
482.961 505.622 li
485.211 505.622 li
485.211 505.991 li
488.211 505.991 li
488.211 505.622 li
490.461 505.622 li
490.461 505.991 li
493.461 505.991 li
493.461 505.622 li
495.711 505.622 li
495.711 505.991 li
498.711 505.991 li
498.711 505.622 li
500.961 505.622 li
500.961 505.991 li
503.961 505.991 li
503.961 505.622 li
506.211 505.622 li
506.211 505.991 li
509.211 505.991 li
509.211 505.622 li
511.461 505.622 li
511.461 505.991 li
514.461 505.991 li
514.461 505.622 li
516.711 505.622 li
516.711 505.991 li
519.711 505.991 li
519.711 505.622 li
521.961 505.622 li
521.961 505.991 li
524.961 505.991 li
524.961 505.622 li
527.211 505.622 li
527.211 505.991 li
530.211 505.991 li
530.211 505.622 li
532.461 505.622 li
532.461 505.991 li
535.461 505.991 li
535.461 505.622 li
537.711 505.622 li
537.711 505.991 li
539.093 505.991 li
539.093 506.017 li
517.205 506.017 li
517.205 535.969 li
539.093 535.969 li
539.093 589.386 li
0 0 0 0 cmyk
f
539.093 505.991 mo
537.711 505.991 li
537.711 505.622 li
539.093 505.622 li
539.093 505.991 li
535.461 505.991 mo
532.461 505.991 li
532.461 505.622 li
535.461 505.622 li
535.461 505.991 li
530.211 505.991 mo
527.211 505.991 li
527.211 505.622 li
530.211 505.622 li
530.211 505.991 li
524.961 505.991 mo
521.961 505.991 li
521.961 505.622 li
524.961 505.622 li
524.961 505.991 li
519.711 505.991 mo
516.711 505.991 li
516.711 505.622 li
519.711 505.622 li
519.711 505.991 li
514.461 505.991 mo
511.461 505.991 li
511.461 505.622 li
514.461 505.622 li
514.461 505.991 li
509.211 505.991 mo
506.211 505.991 li
506.211 505.622 li
509.211 505.622 li
509.211 505.991 li
503.961 505.991 mo
500.961 505.991 li
500.961 505.622 li
503.961 505.622 li
503.961 505.991 li
498.711 505.991 mo
495.711 505.991 li
495.711 505.622 li
498.711 505.622 li
498.711 505.991 li
493.461 505.991 mo
490.461 505.991 li
490.461 505.622 li
493.461 505.622 li
493.461 505.991 li
488.211 505.991 mo
485.211 505.991 li
485.211 505.622 li
488.211 505.622 li
488.211 505.991 li
482.961 505.991 mo
479.961 505.991 li
479.961 505.622 li
482.961 505.622 li
482.961 505.991 li
477.711 505.991 mo
474.711 505.991 li
474.711 505.622 li
477.711 505.622 li
477.711 505.991 li
472.461 505.991 mo
471.176 505.991 li
471.076 505.991 470.981 505.952 470.911 505.881 cv
470.651 505.622 li
472.461 505.622 li
472.461 505.991 li
.750271 .679713 .654902 .901945 cmyk
f
407.778 506.607 mo
407.778 505.622 li
409.971 505.622 li
407.778 506.607 li
0 0 0 0 cmyk
f
407.778 509.895 mo
407.778 506.607 li
409.971 505.622 li
417.295 505.622 li
407.778 509.895 li
.750271 .679713 .654902 .901945 cmyk
f
.750271 .679713 .654902 .901945 cmyk
QYTQWZ+ArialMT [14 0 0 -14 0 0 ]msf
414.528 525.812 mo
(\000I\000L\000Q\000L\000V\000K\000\022)
[3.8779 3.10797 7.784 3.108 7.00003 7.784 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+CourierNew-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/QJJAAA+CourierNew-Bold 1 GetGlyphDirectory
50 <001C60D8A8C9B7C3C9EDAD27232F7B32397410C5DE15A5EC83E022E048B7
70072FA88FA1609CD3EEDC5049AB379BED76913411F2D4D1839A42A9C719B46B
023AC02D8B22A8E5711F1AB1093AB0DA714DD7C884BB45A4FA9C13FFFFB48DEA
2E8EF6502BE0C67BC5BE35A90271DD56B1DCFC79BC0DD98D51F8E9EDB7E41F85
B30C9696633397> |
!
end
end end
%ADOEndSubsetFont
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
414.528 542.312 mo
(\000H\000Q\000T\000X\000H\000X\000H\000\013\0004)
[8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 8.40005 8.40009 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
490.098 547.562 mo
(\0002)sh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
495.695 542.312 mo
(\000\014)sh
414.528 558.812 mo
(\000U\000H\000O\000H\000D\000V\000H\000\013\000%\000%)
[8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
498.494 564.062 mo
(\000U\000X\000Q)
[5.60007 5.60007 0 ]xsh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
515.287 558.812 mo
(\000\014)sh
414.528 575.312 mo
(\000V\000F\000K\000H\000G\000X\000O\000H\000\013\000\014)
[8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 0 ]xsh
277.662 569.661 mo
148.055 569.661 li
148.055 505.622 li
148.372 505.622 li
148.372 505.997 li
151.372 505.997 li
151.372 505.622 li
153.622 505.622 li
153.622 505.997 li
156.622 505.997 li
156.622 505.622 li
158.872 505.622 li
158.872 505.997 li
161.872 505.997 li
161.872 505.622 li
164.122 505.622 li
164.122 505.997 li
167.122 505.997 li
167.122 505.622 li
169.372 505.622 li
169.372 505.997 li
172.372 505.997 li
172.372 505.622 li
174.622 505.622 li
174.622 505.997 li
177.622 505.997 li
177.622 505.622 li
179.872 505.622 li
179.872 505.997 li
182.872 505.997 li
182.872 505.622 li
185.122 505.622 li
185.122 505.997 li
188.122 505.997 li
188.122 505.622 li
190.372 505.622 li
190.372 505.997 li
193.372 505.997 li
193.372 505.622 li
195.622 505.622 li
195.622 505.997 li
198.622 505.997 li
198.622 505.622 li
200.872 505.622 li
200.872 505.997 li
203.872 505.997 li
203.872 505.622 li
206.122 505.622 li
206.122 505.997 li
208.457 505.997 li
208.555 505.997 208.652 505.957 208.722 505.887 cv
208.792 505.817 208.832 505.721 208.832 505.622 cv
248.727 505.622 li
283.291 521.142 li
283.291 541.547 li
280.094 542.102 277.662 544.89 277.662 548.247 cv
277.662 548.247 li
277.662 569.661 li
0 0 0 0 cmyk
f
208.457 505.997 mo
206.122 505.997 li
206.122 505.622 li
208.832 505.622 li
208.832 505.721 208.792 505.817 208.722 505.887 cv
208.652 505.957 208.555 505.997 208.457 505.997 cv
203.872 505.997 mo
200.872 505.997 li
200.872 505.622 li
203.872 505.622 li
203.872 505.997 li
198.622 505.997 mo
195.622 505.997 li
195.622 505.622 li
198.622 505.622 li
198.622 505.997 li
193.372 505.997 mo
190.372 505.997 li
190.372 505.622 li
193.372 505.622 li
193.372 505.997 li
188.122 505.997 mo
185.122 505.997 li
185.122 505.622 li
188.122 505.622 li
188.122 505.997 li
182.872 505.997 mo
179.872 505.997 li
179.872 505.622 li
182.872 505.622 li
182.872 505.997 li
177.622 505.997 mo
174.622 505.997 li
174.622 505.622 li
177.622 505.622 li
177.622 505.997 li
172.372 505.997 mo
169.372 505.997 li
169.372 505.622 li
172.372 505.622 li
172.372 505.997 li
167.122 505.997 mo
164.122 505.997 li
164.122 505.622 li
167.122 505.622 li
167.122 505.997 li
161.872 505.997 mo
158.872 505.997 li
158.872 505.622 li
161.872 505.622 li
161.872 505.997 li
156.622 505.997 mo
153.622 505.997 li
153.622 505.622 li
156.622 505.622 li
156.622 505.997 li
151.372 505.997 mo
148.372 505.997 li
148.372 505.622 li
151.372 505.622 li
151.372 505.997 li
.750271 .679713 .654902 .901945 cmyk
f
283.291 569.661 mo
278.412 569.661 li
278.412 548.247 li
278.412 548.247 li
278.412 546.575 279.089 545.065 280.184 543.969 cv
281.018 543.136 282.09 542.545 283.291 542.31 cv
283.291 569.661 li
0 0 0 0 cmyk
f
278.412 569.661 mo
277.662 569.661 li
277.662 548.247 li
277.662 544.89 280.094 542.102 283.291 541.547 cv
283.291 542.31 li
282.09 542.545 281.018 543.136 280.184 543.969 cv
279.089 545.065 278.412 546.575 278.412 548.247 cv
278.412 548.247 li
278.412 548.247 li
278.412 569.661 li
.750271 .679713 .654902 .901945 cmyk
f
283.291 517.854 mo
256.051 505.622 li
283.291 505.622 li
283.291 517.854 li
0 0 0 0 cmyk
f
283.291 521.142 mo
248.727 505.622 li
256.051 505.622 li
283.291 517.854 li
283.291 521.142 li
.750271 .679713 .654902 .901945 cmyk
f
.750271 .679713 .654902 .901945 cmyk
QYTQWZ+ArialMT [14 0 0 -14 0 0 ]msf
154.805 525.812 mo
(\000G\000L\000V\000S\000D\000W\000F\000K\000\022)
[7.784 3.10799 7 7.784 7.784 3.8779 7.00002 7.784 0 ]xsh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
154.805 542.312 mo
(\000U\000P\000B\000I\000U\000R\000P\000\013\0004)
[8.40007 8.40009 8.4001 8.40007 8.40009 8.4001 8.40007 8.40009 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
230.375 547.562 mo
(\0002)sh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
235.973 542.312 mo
(\000\014)sh
154.805 558.812 mo
(\000D\000O\000O\000R\000F\000D\000W\000H\000\013\000%\000%)
[8.40007 8.40009 8.4001 8.40007 8.40009 8.4001 8.40007 8.40009 8.4001 8.40007 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
247.169 564.062 mo
(\000R\000X\000W)
[5.60005 5.60005 0 ]xsh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
263.962 558.812 mo
(\000\014)sh
277.662 330.534 mo
201.97 330.534 li
200.876 329.441 li
200.611 329.706 li
199.02 328.115 li
199.285 327.85 li
197.164 325.729 li
196.899 325.994 li
195.308 324.403 li
195.573 324.138 li
194.142 322.706 li
194.142 266.495 li
318.441 266.495 li
318.441 322.852 li
284.463 322.852 li
280.707 322.853 277.663 325.897 277.662 329.653 cv
277.662 329.653 li
277.662 330.534 li
0 0 0 0 cmyk
f
200.909 330.534 mo
194.142 330.534 li
194.142 323.767 li
195.043 324.668 li
195.308 324.403 li
196.899 325.994 li
196.634 326.259 li
198.755 328.38 li
199.02 328.115 li
200.611 329.706 li
200.346 329.971 li
200.909 330.534 li
.592523 .2374 0 0 cmyk
f
201.97 330.534 mo
200.909 330.534 li
200.346 329.971 li
200.611 329.706 li
200.876 329.441 li
201.97 330.534 li
198.755 328.38 mo
196.634 326.259 li
196.899 325.994 li
197.164 325.729 li
199.285 327.85 li
199.02 328.115 li
198.755 328.38 li
195.043 324.668 mo
194.142 323.767 li
194.142 322.706 li
195.573 324.138 li
195.308 324.403 li
195.043 324.668 li
.750271 .679713 .654902 .901945 cmyk
f
.750271 .679713 .654902 .901945 cmyk
QYTQWZ+ArialMT [14 0 0 -14 0 0 ]msf
200.892 286.685 mo
(\000I\000L\000Q\000L\000V\000K\000\022)
[3.8779 3.10799 7.784 3.108 7.00002 7.784 0 ]xsh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
200.892 303.185 mo
(\000U\000H\000O\000H\000D\000V\000H\000\013\000%\000%)
[8.40007 8.40009 8.4001 8.40007 8.40009 8.4001 8.40007 8.40009 8.40009 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
284.859 308.435 mo
(\000R\000X\000W)
[5.60004 5.60007 0 ]xsh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
301.652 303.185 mo
(\000\014)sh
200.892 319.685 mo
(\000V\000F\000K\000H\000G\000X\000O\000H\000\013\000\014)
[8.40007 8.40009 8.4001 8.40007 8.40009 8.4001 8.40007 8.40009 8.40009 0 ]xsh
501.729 60.4469 mo
501.729 57.6896 503.964 55.4546 506.721 55.4546 cv
585.603 55.4546 li
586.927 55.4546 588.197 55.9804 589.133 56.9168 cv
590.069 57.8529 590.595 59.1228 590.595 60.4469 cv
590.595 80.4151 li
590.595 83.1722 588.36 85.4073 585.603 85.4073 cv
506.721 85.4073 li
503.964 85.4073 501.729 83.1722 501.729 80.4151 cv
501.729 60.4469 li
0 0 0 0 cmyk
f
501.729 60.4467 mo
502.104 60.4467 li
502.104 59.1706 502.62 58.0186 503.456 57.1819 cv
504.293 56.3458 505.445 55.8297 506.721 55.8296 cv
585.603 55.8296 li
586.827 55.8296 588.002 56.316 588.868 57.1819 cv
589.734 58.0477 590.22 59.2222 590.22 60.4467 cv
590.22 80.4151 li
590.22 81.6912 589.704 82.8431 588.868 83.6799 cv
588.031 84.5161 586.879 85.032 585.603 85.0323 cv
506.721 85.0323 li
505.445 85.032 504.293 84.5161 503.456 83.6799 cv
502.62 82.8431 502.104 81.6912 502.104 80.4151 cv
502.104 60.4467 li
501.729 60.4467 li
501.354 60.4467 li
501.354 80.4151 li
501.354 83.3794 503.757 85.782 506.721 85.7823 cv
585.603 85.7823 li
588.567 85.782 590.97 83.3794 590.97 80.4151 cv
590.97 60.4467 li
590.97 59.0233 590.405 57.658 589.398 56.6516 cv
588.391 55.645 587.026 55.0796 585.603 55.0796 cv
506.721 55.0796 li
503.757 55.0798 501.354 57.4823 501.354 60.4467 cv
501.729 60.4467 li
.750271 .679713 .654902 .901945 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Arial-BoldMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+Arial-BoldMT 3 GetGlyphDirectory
45 <001C60D8A8C9B7EF322BCBE280C22367457BA30917BF0D1B07B12F1A04A9
C60A4874C9EE5DB3B90A588C5C07B1C8F3479DF10173E78C0C37BBC3FD504697
A6FABECEE626AD51A845B5C58CC51C8DFC4D1E3679BDE58DCC1C90> |
69 <001C60D8A8C9B7D8BE1671B6042109CDB81BD17EE7497C90F9ACDA9D163A
DAFA6361E188897A4B68FD4101C0DFF9827C3E0810E4C104ADB26FCFB7392E3E
66FDF7A9C86FBB82D51B276A3D658E1330F7C5C615410686D27E44BA9CDCA421
2076F89ABD511F1956BE19FF29EE6CBCC95AE9285DCCADBA7BCF7A3124FE7D2B
C7C3485D1834390BEE8C> |
86 <001C60D8A8C9B7EF322FE651D521834CDC537E3DD6EDE0ABF561677B8E07
6DDC9728066ABB56D1B743872DFE7AE020F0764CE3958A51AA0338BC1551D98A
E3FB37FA10E152AF1ED0A626D6C892D666067C463296034FB47068E23F64D994
06EC5C2C17229C4A63CE0EFA8720ACDB7F7406ADA1BC78971EA6415F06129169
2781A355051246F6EE6DC9DD910EE9B57ECB7AA0A970570176A3D15D1E3F2012
D47AFFA014792503A125E8700D4C4B9A85575792648D6CE60E59BBF3015C0285
B0> |
!
end
end end
%ADOEndSubsetFont
QYTQWY+Arial-BoldMT [12 0 0 -12 0 0 ]msf
515.491 74.8259 mo
(\000-\000R\000E\000\003\0006\000W\000D\000W\000X\000V)
[6.672 7.32001 7.32001 3.32391 7.992 3.99591 6.672 3.99591 7.32001 0 ]xsh
590.22 70.4779 mo
576.199 70.4705 li
576.199 66.0781 li
515.695 66.0781 li
515.695 70.4383 li
502.104 70.4311 li
502.104 60.4467 li
502.104 60.4467 li
502.104 59.1706 502.62 58.0186 503.456 57.1819 cv
504.293 56.3458 505.445 55.8297 506.721 55.8296 cv
585.603 55.8296 li
586.827 55.8296 588.002 56.316 588.868 57.1819 cv
589.734 58.0477 590.22 59.2222 590.22 60.4467 cv
590.22 70.4779 li
0 0 0 0 cmyk
f
590.97 70.4734 mo
590.97 60.4467 li
590.97 59.0233 590.405 57.658 589.398 56.6516 cv
588.391 55.645 587.026 55.0796 585.603 55.0796 cv
506.721 55.0796 li
503.757 55.0798 501.354 57.4823 501.354 60.4467 cv
501.354 60.4467 li
501.354 70.0514 li
497.568 69.9581 492.746 68.4192 488.865 66.0351 cv
486.858 64.805 485.101 63.3509 483.858 61.7733 cv
482.613 60.1941 481.886 58.5038 481.886 56.7786 cv
481.888 55.4595 482.306 54.1049 483.286 52.7196 cv
484.811 50.5596 487.735 48.3354 491.706 46.2522 cv
498.901 42.4701 509.513 39.1325 521.469 37.0829 cv
570.821 37.0829 li
576.188 38.0027 581.284 39.1822 585.923 40.546 cv
591.63 42.2233 596.644 44.1794 600.616 46.2676 cv
604.587 48.3532 607.512 50.58 609.038 52.7429 cv
610.017 54.1299 610.436 55.4863 610.437 56.8074 cv
610.444 59.5967 608.517 62.3229 605.635 64.5724 cv
603.518 66.2263 600.903 67.6138 598.244 68.583 cv
596.914 69.0678 595.573 69.4483 594.279 69.7072 cv
593.956 69.7717 593.637 69.8286 593.321 69.8779 cv
593.104 69.9091 li
593.158 70.2816 li
592.404 70.3909 591.671 70.4562 590.97 70.4734 cv
f
590.595 70.4781 mo
590.22 70.4779 li
590.22 60.4467 li
590.22 59.2222 589.734 58.0477 588.868 57.1819 cv
588.002 56.316 586.827 55.8296 585.603 55.8296 cv
506.721 55.8296 li
505.445 55.8297 504.293 56.3458 503.456 57.1819 cv
502.62 58.0186 502.104 59.1706 502.104 60.4467 cv
502.104 60.4467 li
502.104 60.4467 li
502.104 70.4311 li
501.729 70.4309 li
501.729 70.0559 li
501.725 70.0559 501.72 70.0559 501.715 70.0559 cv
501.596 70.0559 501.476 70.0544 501.354 70.0514 cv
501.354 60.4467 li
501.354 57.4823 503.757 55.0798 506.721 55.0796 cv
585.603 55.0796 li
587.026 55.0796 588.391 55.645 589.398 56.6516 cv
590.405 57.658 590.97 59.0233 590.97 60.4467 cv
590.97 70.4734 li
590.844 70.4765 590.719 70.4781 590.595 70.4781 cv
.750271 .679713 .654902 .901945 cmyk
f
gsave
576.199 70.4705 mo
515.695 70.4383 li
515.695 66.0781 li
576.199 66.0781 li
576.199 70.4705 li
clp
515.695 66.0781 mo
576.199 66.0781 li
576.199 70.4705 li
515.695 70.4705 li
cp
0 0 0 0 cmyk
f
.750271 .679713 .654902 .901945 cmyk
QYTQWY+Arial-BoldMT [12 0 0 -12 0 0 ]msf
515.491 74.8259 mo
(\000-\000R\000E\000\003\0006\000W\000D\000W\000X\000V)
[6.672 7.32001 7.32001 3.32391 7.992 3.99591 6.672 3.99591 7.32001 0 ]xsh
grestore
501.729 70.0559 mo
497.891 70.0597 492.875 68.4986 488.865 66.0351 cv
486.858 64.805 485.101 63.3509 483.858 61.7733 cv
482.613 60.1941 481.886 58.5038 481.886 56.7786 cv
481.888 55.4595 482.306 54.1049 483.286 52.7196 cv
484.811 50.5596 487.735 48.3354 491.706 46.2522 cv
503.621 39.9892 524.898 34.9463 546.146 34.9497 cv
546.161 34.9497 li
560.331 34.951 574.51 37.1909 585.923 40.546 cv
591.63 42.2233 596.644 44.1794 600.616 46.2676 cv
604.587 48.3532 607.512 50.58 609.038 52.7429 cv
610.017 54.1299 610.436 55.4863 610.437 56.8074 cv
610.444 59.5967 608.517 62.3229 605.635 64.5724 cv
603.518 66.2263 600.903 67.6138 598.244 68.583 cv
596.914 69.0678 595.573 69.4483 594.279 69.7072 cv
593.955 69.772 593.635 69.829 593.318 69.8784 cv
593.376 70.2488 li
593.322 69.8777 li
593.104 69.9091 li
593.211 70.6514 li
593.429 70.62 li
593.433 70.6193 li
593.761 70.5684 594.092 70.5093 594.426 70.4426 cv
595.761 70.1756 597.137 69.7847 598.5 69.2876 cv
601.227 68.2931 603.904 66.8756 606.096 65.1635 cv
609.067 62.8401 611.18 59.9581 611.187 56.8074 cv
611.188 55.3238 610.707 53.8015 609.65 52.3099 cv
608.002 49.9854 604.994 47.7249 600.965 45.6038 cv
588.878 39.2537 567.536 34.2058 546.162 34.1998 cv
546.146 34.1998 li
531.9 34.2003 517.666 36.4457 506.183 39.8178 cv
500.441 41.5044 495.386 43.4721 491.357 45.5883 cv
487.329 47.7069 484.322 49.9646 482.674 52.2862 cv
481.617 53.7762 481.135 55.2967 481.137 56.7786 cv
481.137 58.7202 481.953 60.5696 483.269 62.2377 cv
485.246 64.7413 488.355 66.8692 491.719 68.3868 cv
495.084 69.9018 498.703 70.8044 501.729 70.8059 cv
501.729 70.0559 li
f
593.158 70.2803 mo
593.934 69.3744 li
591.688 70.3937 li
594.064 71.0562 li
cp
ef
.75 lw
593.158 70.2802 mo
593.934 69.3744 li
591.688 70.3937 li
594.064 71.0562 li
cp
@
617.726 37.0829 mo
574.932 37.0829 li
565.96 35.2874 556.065 34.2026 546.162 34.1998 cv
546.146 34.1998 li
536.237 34.2001 526.334 35.2867 517.358 37.0829 cv
474.6 37.0829 li
474.6 7.13016 li
617.726 7.13016 li
617.726 37.0829 li
0 0 0 0 cmyk
f
570.821 37.0829 mo
521.469 37.0829 li
529.304 35.7397 537.715 34.9497 546.124 34.9497 cv
546.132 34.9497 546.138 34.9497 546.146 34.9497 cv
546.161 34.9497 li
554.571 34.9505 562.985 35.7399 570.821 37.0829 cv
f
574.932 37.0829 mo
570.821 37.0829 li
562.985 35.7399 554.571 34.9505 546.161 34.9497 cv
546.146 34.9497 li
546.138 34.9497 546.132 34.9497 546.124 34.9497 cv
537.715 34.9497 529.304 35.7397 521.469 37.0829 cv
517.358 37.0829 li
526.334 35.2867 536.237 34.2001 546.146 34.1998 cv
546.162 34.1998 li
556.065 34.2026 565.96 35.2874 574.932 37.0829 cv
.750271 .679713 .654902 .901945 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: HIBBAA+ArialMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HIBBAA+ArialMT 2 GetGlyphDirectory
72 <001C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449
B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C
8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0E
EA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37
295284C077711C162623860AACA404F650F8D516970257> |
89 <001C60D8A8C9B7A73DB99D94C9412F55B03E92C174A4755E69F97C27D916
2B37724F74F272B140D258652D102C2EAC46833C73F9> |
!
end
end end
%ADOEndSubsetFont
QYTQWZ+ArialMT [12 0 0 -12 0 0 ]msf
501.014 25.4001 mo
(\000H\000Y\000H\000Q\000W\000\022)
[6.672 6 6.672 6.672 3.32391 0 ]xsh
QYTQXA+CourierNew-Bold [12 0 0 -12 0 0 ]msf
533.703 25.4001 mo
(\000D\000F\000W\000L\000R\000Q\000\013\000\014)
[7.20007 7.20007 7.20007 7.20007 7.20007 7.20007 7.20007 0 ]xsh
491.195 329.653 mo
491.195 326.104 494.072 323.227 497.62 323.227 cv
594.706 323.227 li
596.411 323.227 598.045 323.904 599.25 325.109 cv
600.455 326.314 601.132 327.949 601.132 329.653 cv
601.132 355.353 li
601.132 358.902 598.255 361.779 594.706 361.779 cv
497.62 361.779 li
494.072 361.779 491.195 358.902 491.195 355.353 cv
491.195 329.653 li
0 0 0 0 cmyk
f
491.195 329.653 mo
491.57 329.653 li
491.57 327.981 492.246 326.47 493.342 325.374 cv
494.438 324.279 495.948 323.603 497.62 323.602 cv
594.706 323.602 li
596.311 323.602 597.85 324.24 598.985 325.374 cv
600.119 326.509 600.757 328.048 600.757 329.653 cv
600.757 355.353 li
600.756 357.025 600.08 358.535 598.985 359.631 cv
597.889 360.727 596.378 361.403 594.706 361.403 cv
497.62 361.403 li
495.948 361.403 494.438 360.727 493.342 359.631 cv
492.246 358.535 491.57 357.025 491.57 355.353 cv
491.57 329.653 li
491.195 329.653 li
490.82 329.653 li
490.82 355.353 li
490.82 359.109 493.864 362.153 497.62 362.153 cv
594.706 362.153 li
598.462 362.153 601.506 359.109 601.507 355.353 cv
601.507 329.653 li
601.507 327.849 600.79 326.119 599.515 324.844 cv
598.24 323.569 596.51 322.852 594.706 322.852 cv
497.62 322.852 li
493.864 322.853 490.82 325.897 490.82 329.653 cv
491.195 329.653 li
.750271 .679713 .654902 .901945 cmyk
f
.0583505 .508568 1 .000854505 cmyk
%ADOBeginSubsetFont: PBAAAA+Arial-BoldMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+Arial-BoldMT 3 GetGlyphDirectory
41 <001C60D8A8C9B7D8BE164A384446DA6B7BAA798AC9D25A30491D373B778A
BEDC450E08B3A2A56A100F> |
70 <001C60D8A8C9B7EF32242001ABD2AFBBD336641D8D7284783472C96CFCC4
34DFC100FC24422711A9090DEA4D32109037578992AFF27835B7F260887A799C
BA44C497ED942D76A3A4BD63536DE6F757481EB22D2DEF055F331ED962220273
9AC583596554B76ADC212E19C7FBCE810B4022B5DAB3AF3C114AF2730DCBE9D3
5CB6B42E872730D77BAB> |
75 <001C60D8A8C9B7D8BE30E20DCA6EE6AB6CC3B52F6392A45738EC6E57C5FD
4B5006DD4CC13130165A71E6C8AD32848FD70F464465300BAF67B8EDC5E52749
AF8D970E7EFFDCC8EF63F6AB31364E59004A6FCF5A143C0BB48A0AC6C4FDED13
12DDD5BAEDEFE14256E656A094680FE5979938> |
!
end
end end
%ADOEndSubsetFont
QYTQWY+Arial-BoldMT [14 0 0 -14 0 0 ]msf
508.467 347.693 mo
(\000\)\000H\000W\000F\000K\000L\000Q\000J\000\020\000L\000Q)
[8.53998 7.784 4.66193 7.784 8.53998 3.87793 8.53998 8.54004 4.66187 3.87793 0 ]xsh
546.163 322.852 mo
546.163 322.852 li
546.163 311.024 li
546.163 322.852 li
.00393683 .347387 .705714 0 cmyk
f
546.163 239.992 mo
546.163 239.992 li
546.163 228.163 li
546.163 239.992 li
0 0 0 0 cmyk
f
546.163 228.163 mo
546.163 228.163 li
546.163 227.788 li
546.163 228.163 li
.750271 .679713 .654902 .901945 cmyk
f
546.163 303.931 mo
546.163 303.931 li
546.163 239.992 li
546.163 303.931 li
0 0 0 0 cmyk
f
546.163 311.024 mo
546.163 311.024 li
546.163 303.931 li
546.163 311.024 li
.00393683 .347387 .705714 0 cmyk
f
546.163 323.221 mo
546.163 322.852 li
546.163 323.221 li
.750271 .679713 .654902 .901945 cmyk
f
3 lw
1 lj
14.3356 ml
546.163 227.788 mo
546.163 305.221 li
@
541.208 305.221 mo
546.163 318.836 li
551.119 305.221 li
cp
ef
0 lj
11.4737 ml
541.208 305.221 mo
546.163 318.836 li
551.119 305.221 li
cp
@
108.033 445.537 mo
108.033 379.774 li
105.033 379.774 li
105.033 445.537 li
108.033 445.537 li
f
111.489 379.774 mo
106.534 366.159 li
101.578 379.774 li
111.489 379.774 li
ef
111.489 379.774 mo
112.898 379.26 li
106.534 361.774 li
99.436 381.273 li
113.631 381.273 li
112.898 379.26 li
111.489 379.774 li
111.489 378.273 li
103.721 378.273 li
106.533 370.545 li
110.079 380.286 li
111.489 379.774 li
111.489 378.273 li
111.489 379.774 li
f
51.5649 329.652 mo
51.5649 326.103 54.4416 323.226 57.9904 323.226 cv
155.077 323.226 li
156.781 323.226 158.415 323.903 159.62 325.108 cv
160.825 326.313 161.502 327.948 161.502 329.652 cv
161.502 355.352 li
161.502 358.901 158.625 361.777 155.077 361.777 cv
57.9904 361.777 li
54.4416 361.777 51.5649 358.901 51.5649 355.352 cv
51.5649 329.652 li
0 0 0 0 cmyk
f
51.5649 329.652 mo
51.9399 329.652 li
51.9402 327.98 52.6166 326.469 53.7121 325.373 cv
54.8081 324.278 56.3183 323.601 57.9902 323.601 cv
155.077 323.601 li
156.681 323.601 158.22 324.239 159.355 325.373 cv
160.489 326.508 161.127 328.047 161.127 329.652 cv
161.127 355.352 li
161.127 357.024 160.45 358.534 159.355 359.63 cv
158.259 360.726 156.749 361.402 155.077 361.403 cv
57.9902 361.403 li
56.3183 361.402 54.8081 360.726 53.7121 359.63 cv
52.6166 358.534 51.9402 357.024 51.9399 355.352 cv
51.9399 329.652 li
51.5649 329.652 li
51.1899 329.652 li
51.1899 355.352 li
51.1902 359.108 54.2344 362.152 57.9902 362.152 cv
155.077 362.152 li
158.832 362.152 161.877 359.108 161.877 355.352 cv
161.877 329.652 li
161.877 327.848 161.16 326.118 159.885 324.843 cv
158.61 323.568 156.88 322.851 155.077 322.851 cv
57.9902 322.851 li
54.2344 322.852 51.1902 325.896 51.1899 329.652 cv
51.5649 329.652 li
.750271 .679713 .654902 .901945 cmyk
f
.940581 .734279 0 0 cmyk
QYTQWY+Arial-BoldMT [14 0 0 -14 0 0 ]msf
67.6758 347.692 mo
(\0006\000W\000D\000J\000L\000Q\000J\000\020\000R\000X\000W)
[9.32401 4.6619 7.784 8.54001 3.8779 8.54002 8.54 4.6619 8.54 8.54001 0 ]xsh
278.037 329.653 mo
278.037 326.104 280.914 323.227 284.463 323.227 cv
381.549 323.227 li
383.253 323.227 384.887 323.904 386.092 325.109 cv
387.298 326.314 387.974 327.949 387.974 329.653 cv
387.974 355.353 li
387.974 358.902 385.098 361.779 381.549 361.779 cv
284.463 361.779 li
280.914 361.779 278.037 358.902 278.037 355.353 cv
278.037 329.653 li
0 0 0 0 cmyk
f
278.037 329.653 mo
278.412 329.653 li
278.412 327.981 279.089 326.47 280.184 325.374 cv
281.281 324.279 282.791 323.603 284.463 323.602 cv
381.549 323.602 li
383.154 323.602 384.693 324.24 385.827 325.374 cv
386.962 326.509 387.599 328.048 387.599 329.653 cv
387.599 355.353 li
387.599 357.025 386.923 358.535 385.827 359.631 cv
384.731 360.727 383.221 361.403 381.549 361.403 cv
284.463 361.403 li
282.791 361.403 281.281 360.727 280.184 359.631 cv
279.089 358.535 278.412 357.025 278.412 355.353 cv
278.412 329.653 li
278.037 329.653 li
277.662 329.653 li
277.662 355.353 li
277.663 359.109 280.707 362.153 284.463 362.153 cv
381.549 362.153 li
385.305 362.153 388.349 359.109 388.349 355.353 cv
388.349 329.653 li
388.349 327.849 387.633 326.119 386.357 324.844 cv
385.082 323.569 383.353 322.852 381.549 322.852 cv
284.463 322.852 li
280.707 322.853 277.663 325.897 277.662 329.653 cv
278.037 329.653 li
.750271 .679713 .654902 .901945 cmyk
f
.847379 .310521 1 .221592 cmyk
%ADOBeginSubsetFont: PBAAAA+Arial-BoldMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+Arial-BoldMT 4 GetGlyphDirectory
38 <001C60D8A8C9B6079F6DE2AEDD76F722AB1905C7EE1983D1040F12090A2B
6BB93FD7976832C00E38F0C4C79BDBC9D981E45F6BB26E1DD13A0FA297509E8F
73D8E4A29558A673AA886D0B1CE2BDB03B1E58D12F23798709409D59C03EBEE5
D9CA02E1DEC19C7936D25A234D617C91BF02C16AA27F9D6F9EC37F9EB080F7BD
6AF1EE128160DD9B3DB18FE4> |
80 <001C60D8A8C9B59F85D96BFFA227AFC88923A0D1805E73B422C61096C748
C37D1E540D36A22F2B6BC6A899BC0DDFB70F833AC344264273BAAFC893B1FC9E
D217D777A23EE663B8B086E0514F75141042C5D3D73DD911F2D1CAF8A5CBE36B
AF59E972B9B495DB672C658FCC56CEAEBD4AEC19A01E1468C48C0E75D0E66471
7269A1A74C27B1C65DA4B01A0679EBF4AA6549A7814A2C66FB097D4B1C6FCCF6
29A056E668289EBF7379F0E89EA139501E> |
83 <001C60D8A8C9B7D8BE2E8563B32C07DCC3804272870E069E443B687857C9
ACB5C7CA1CF4F6A17C25172CC3E3E31B65AB87A5F695EADCB9429C1CB7981C75
0B5DB31D41989E5AF25C22D1AF173045FD1E2E798D136DAECB194448D3991450
715E7374AE8B43D8B50AD9D750A67743A1F2A35DFF73BE71D039D15D8530023A
7DA074A0D1B66504E092406A88A86DBDD558> |
79 <001C60D8A8C9B854D0F4565C5D96D196F316A2594284F4> |
!
end
end end
%ADOEndSubsetFont
QYTQWY+Arial-BoldMT [14 0 0 -14 0 0 ]msf
294.531 347.693 mo
(\000&\000R\000P\000S\000O\000H\000W\000L\000R\000Q)
[10.108 8.54001 12.4461 8.54001 3.8779 7.784 4.6619 3.8779 8.54001 0 ]xsh
277.662 342.502 mo
208.832 342.502 li
277.662 342.502 li
0 0 0 0 cmyk
f
208.082 342.502 mo
161.877 342.502 li
208.082 342.502 li
.592523 .2374 0 0 cmyk
f
208.832 342.502 mo
208.082 342.502 li
208.832 342.502 li
.750271 .679713 .654902 .901945 cmyk
f
161.877 342.502 mo
161.502 342.502 li
161.877 342.502 li
f
278.029 342.502 mo
277.662 342.502 li
278.029 342.502 li
f
1 lj
14.3356 ml
161.502 342.502 mo
260.029 342.502 li
@
260.03 347.457 mo
273.644 342.502 li
260.03 337.547 li
cp
ef
0 lj
11.4737 ml
260.029 347.457 mo
273.644 342.502 li
260.029 337.547 li
cp
@
553.429 439.32 mo
550.603 439.32 li
553.261 432.019 li
547.663 432.019 li
547.663 373.981 li
553.429 373.981 li
553.429 439.32 li
.00393683 .347387 .705714 0 cmyk
f
437.186 439.32 mo
434.846 439.32 li
434.846 373.981 li
437.561 373.981 li
437.561 376.075 li
437.186 376.075 li
437.186 379.075 li
437.561 379.075 li
437.561 381.325 li
437.186 381.325 li
437.186 384.325 li
437.561 384.325 li
437.561 386.575 li
437.186 386.575 li
437.186 389.575 li
437.561 389.575 li
437.561 391.825 li
437.186 391.825 li
437.186 394.825 li
437.561 394.825 li
437.561 397.075 li
437.186 397.075 li
437.186 400.075 li
437.561 400.075 li
437.561 402.325 li
437.186 402.325 li
437.186 405.325 li
437.561 405.325 li
437.561 407.575 li
437.186 407.575 li
437.186 410.575 li
437.561 410.575 li
437.561 412.825 li
437.186 412.825 li
437.186 415.825 li
437.561 415.825 li
437.561 418.075 li
437.186 418.075 li
437.186 421.075 li
437.561 421.075 li
437.561 423.325 li
437.186 423.325 li
437.186 426.325 li
437.561 426.325 li
437.561 428.575 li
437.186 428.575 li
437.186 431.575 li
437.561 431.575 li
437.561 433.825 li
437.186 433.825 li
437.186 436.825 li
437.561 436.825 li
437.561 439.075 li
437.186 439.075 li
437.186 439.32 li
0 0 0 0 cmyk
f
541.723 439.32 mo
437.936 439.32 li
437.936 439.075 li
437.561 439.075 li
437.561 436.825 li
437.936 436.825 li
437.936 433.825 li
437.561 433.825 li
437.561 431.575 li
437.936 431.575 li
437.936 428.575 li
437.561 428.575 li
437.561 426.325 li
437.936 426.325 li
437.936 423.325 li
437.561 423.325 li
437.561 421.075 li
437.936 421.075 li
437.936 418.075 li
437.561 418.075 li
437.561 415.825 li
437.936 415.825 li
437.936 412.825 li
437.561 412.825 li
437.561 410.575 li
437.936 410.575 li
437.936 407.575 li
437.561 407.575 li
437.561 405.325 li
437.936 405.325 li
437.936 402.325 li
437.561 402.325 li
437.561 400.075 li
437.936 400.075 li
437.936 397.075 li
437.561 397.075 li
437.561 394.825 li
437.936 394.825 li
437.936 391.825 li
437.561 391.825 li
437.561 389.575 li
437.936 389.575 li
437.936 386.575 li
437.561 386.575 li
437.561 384.325 li
437.936 384.325 li
437.936 381.325 li
437.561 381.325 li
437.561 379.075 li
437.936 379.075 li
437.936 376.075 li
437.561 376.075 li
437.561 373.981 li
544.663 373.981 li
544.663 432.019 li
539.066 432.019 li
539.799 434.032 li
541.723 439.32 li
.00393683 .347387 .705714 0 cmyk
f
437.936 439.32 mo
437.186 439.32 li
437.186 439.075 li
437.561 439.075 li
437.936 439.075 li
437.936 439.32 li
437.936 436.825 mo
437.561 436.825 li
437.186 436.825 li
437.186 433.825 li
437.561 433.825 li
437.936 433.825 li
437.936 436.825 li
437.936 431.575 mo
437.561 431.575 li
437.186 431.575 li
437.186 428.575 li
437.561 428.575 li
437.936 428.575 li
437.936 431.575 li
437.936 426.325 mo
437.561 426.325 li
437.186 426.325 li
437.186 423.325 li
437.561 423.325 li
437.936 423.325 li
437.936 426.325 li
437.936 421.075 mo
437.561 421.075 li
437.186 421.075 li
437.186 418.075 li
437.561 418.075 li
437.936 418.075 li
437.936 421.075 li
437.936 415.825 mo
437.561 415.825 li
437.186 415.825 li
437.186 412.825 li
437.561 412.825 li
437.936 412.825 li
437.936 415.825 li
437.936 410.575 mo
437.561 410.575 li
437.186 410.575 li
437.186 407.575 li
437.561 407.575 li
437.936 407.575 li
437.936 410.575 li
437.936 405.325 mo
437.561 405.325 li
437.186 405.325 li
437.186 402.325 li
437.561 402.325 li
437.936 402.325 li
437.936 405.325 li
437.936 400.075 mo
437.561 400.075 li
437.186 400.075 li
437.186 397.075 li
437.561 397.075 li
437.936 397.075 li
437.936 400.075 li
437.936 394.825 mo
437.561 394.825 li
437.186 394.825 li
437.186 391.825 li
437.561 391.825 li
437.936 391.825 li
437.936 394.825 li
437.936 389.575 mo
437.561 389.575 li
437.186 389.575 li
437.186 386.575 li
437.561 386.575 li
437.936 386.575 li
437.936 389.575 li
437.936 384.325 mo
437.561 384.325 li
437.186 384.325 li
437.186 381.325 li
437.561 381.325 li
437.936 381.325 li
437.936 384.325 li
437.936 379.075 mo
437.561 379.075 li
437.186 379.075 li
437.186 376.075 li
437.561 376.075 li
437.936 376.075 li
437.936 379.075 li
.750271 .679713 .654902 .901945 cmyk
f
547.663 432.019 mo
544.663 432.019 li
544.663 373.981 li
547.663 373.981 li
547.663 432.019 li
f
547.411 439.32 mo
544.916 439.32 li
543.35 435.019 li
548.976 435.019 li
547.411 439.32 li
f
550.603 439.32 mo
547.411 439.32 li
548.976 435.019 li
543.35 435.019 li
544.916 439.32 li
541.723 439.32 li
539.799 434.032 li
539.066 432.019 li
544.663 432.019 li
547.663 432.019 li
553.261 432.019 li
550.603 439.32 li
541.208 433.519 mo
541.208 435.019 li
541.208 433.519 li
f
.750271 .679713 .654902 .901945 cmyk
QYTQWZ+ArialMT [14 0 0 -14 0 0 ]msf
441.596 394.171 mo
(\000I\000L\000Q\000L\000V\000K\000\022)
[3.8779 3.10797 7.784 3.108 7.00003 7.784 0 ]xsh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
441.596 410.671 mo
(\000U\000H\000O\000H\000D\000V\000H\000\013\000%\000%)
[8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 8.40005 8.40009 8.40009 0 ]xsh
QYTQXA+CourierNew-Bold [9.33333 0 0 -9.33333 0 0 ]msf
525.563 415.921 mo
(\000L\000Q)
[5.60004 0 ]xsh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
536.759 410.671 mo
(\000\014)sh
441.596 427.171 mo
(\000V\000F\000K\000H\000G\000X\000O\000H\000\013\000\014)
[8.40005 8.40009 8.40012 8.40005 8.40009 8.40012 8.40005 8.40009 8.40009 0 ]xsh
116.472 436.327 mo
108.033 436.327 li
108.033 381.273 li
113.631 381.273 li
112.898 379.26 li
111.489 379.774 li
112.898 379.26 li
109.887 370.988 li
116.472 370.988 li
116.472 436.327 li
105.033 436.327 mo
6.91047 436.327 li
6.91047 433.518 li
6.53549 433.518 li
6.53549 431.268 li
6.91047 431.268 li
6.91047 428.268 li
6.53549 428.268 li
6.53549 426.018 li
6.91047 426.018 li
6.91047 423.018 li
6.53549 423.018 li
6.53549 420.768 li
6.91047 420.768 li
6.91047 417.768 li
6.53549 417.768 li
6.53549 415.518 li
6.91047 415.518 li
6.91047 412.518 li
6.53549 412.518 li
6.53549 410.268 li
6.91047 410.268 li
6.91047 407.268 li
6.53549 407.268 li
6.53549 405.018 li
6.91047 405.018 li
6.91047 402.018 li
6.53549 402.018 li
6.53549 399.768 li
6.91047 399.768 li
6.91047 396.768 li
6.53549 396.768 li
6.53549 394.518 li
6.91047 394.518 li
6.91047 391.518 li
6.53549 391.518 li
6.53549 389.268 li
6.91047 389.268 li
6.91047 386.268 li
6.53549 386.268 li
6.53549 384.018 li
6.91047 384.018 li
6.91047 381.018 li
6.53549 381.018 li
6.53549 378.768 li
6.91047 378.768 li
6.91047 375.768 li
6.53549 375.768 li
6.53549 373.518 li
6.91047 373.518 li
6.91047 370.988 li
103.18 370.988 li
99.436 381.273 li
105.033 381.273 li
105.033 436.327 li
.592523 .2374 0 0 cmyk
f
6.91047 436.327 mo
6.53549 436.327 li
6.53549 433.518 li
6.91047 433.518 li
6.91047 436.327 li
6.91047 431.268 mo
6.53549 431.268 li
6.53549 428.268 li
6.91047 428.268 li
6.91047 431.268 li
6.91047 426.018 mo
6.53549 426.018 li
6.53549 423.018 li
6.91047 423.018 li
6.91047 426.018 li
6.91047 420.768 mo
6.53549 420.768 li
6.53549 417.768 li
6.91047 417.768 li
6.91047 420.768 li
6.91047 415.518 mo
6.53549 415.518 li
6.53549 412.518 li
6.91047 412.518 li
6.91047 415.518 li
6.91047 410.268 mo
6.53549 410.268 li
6.53549 407.268 li
6.91047 407.268 li
6.91047 410.268 li
6.91047 405.018 mo
6.53549 405.018 li
6.53549 402.018 li
6.91047 402.018 li
6.91047 405.018 li
6.91047 399.768 mo
6.53549 399.768 li
6.53549 396.768 li
6.91047 396.768 li
6.91047 399.768 li
6.91047 394.518 mo
6.53549 394.518 li
6.53549 391.518 li
6.91047 391.518 li
6.91047 394.518 li
6.91047 389.268 mo
6.53549 389.268 li
6.53549 386.268 li
6.91047 386.268 li
6.91047 389.268 li
6.91047 384.018 mo
6.53549 384.018 li
6.53549 381.018 li
6.91047 381.018 li
6.91047 384.018 li
6.91047 378.768 mo
6.53549 378.768 li
6.53549 375.768 li
6.91047 375.768 li
6.91047 378.768 li
6.91047 373.518 mo
6.53549 373.518 li
6.53549 370.988 li
6.91047 370.988 li
6.91047 373.518 li
.750271 .679713 .654902 .901945 cmyk
f
108.033 436.327 mo
105.033 436.327 li
105.033 381.273 li
108.033 381.273 li
108.033 436.327 li
f
109.346 378.273 mo
103.721 378.273 li
106.372 370.988 li
106.695 370.988 li
109.346 378.273 li
f
113.631 381.273 mo
108.033 381.273 li
105.033 381.273 li
99.436 381.273 li
103.18 370.988 li
106.372 370.988 li
103.721 378.273 li
109.346 378.273 li
106.695 370.988 li
109.887 370.988 li
112.898 379.26 li
111.489 379.774 li
111.489 378.273 li
111.489 379.774 li
112.898 379.26 li
113.631 381.273 li
111.489 379.774 mo
111.489 379.774 li
f
.750271 .679713 .654902 .901945 cmyk
QYTQWZ+ArialMT [14 0 0 -14 0 0 ]msf
13.2854 391.178 mo
(\000I\000L\000Q\000L\000V\000K\000\022)
[3.8779 3.108 7.784 3.108 7 7.784 0 ]xsh
QYTQXA+CourierNew-Bold [14 0 0 -14 0 0 ]msf
13.2854 407.678 mo
(\000U\000H\000O\000H\000D\000V\000H\000\013\000&\0001\000\014)
[8.40008 8.40009 8.40009 8.40009 8.40008 8.40009 8.40009 8.40008 8.40009 8.40009 0 ]xsh
13.2854 424.178 mo
(\000V\000F\000K\000H\000G\000X\000O\000H\000\013\000\014)
[8.40008 8.40009 8.40009 8.40009 8.40008 8.40009 8.40009 8.40008 8.40009 0 ]xsh
377.787 82.1554 mo
246.472 82.1554 li
246.472 52.2027 li
377.787 52.2027 li
377.787 82.1554 li
0 0 0 0 cmyk
f
.106294 1 1 .0484321 cmyk
%ADOBeginSubsetFont: PBAAAA+Arial-BoldMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+Arial-BoldMT 1 GetGlyphDirectory
51 <001C60D8A8C9B64EDFF4BBA9405C68CB1D32394A0B35B38FF15650A7F4CA
980D304B0E82F2EE31DE1B207C9690A7D1CE7998A46A2671A721A2721266CDB3
CB7162FB8735F8901B59D497FC48B1C8BA82BBC82DEF38A7FA67F275089B99C0
47F77478B3299CF33148E1E790C5C7235CAB593CF69659FDEE7364A65AC06E62
96> |
!
end
end end
%ADOEndSubsetFont
QYTQWY+Arial-BoldMT [16 0 0 -16 0 0 ]msf
254.792 74.3128 mo
(\0006\000W\000D\000J\000H\000\020\000L\000Q\000\003\0003\000K\000D\000V\000H)
[10.656 5.32788 8.896 9.76001 8.896 5.32788 4.43188 9.76001 4.43188 10.656 9.76001 8.896 
8.896 0 ]xsh
149.661 299.574 mo
6.53549 299.574 li
6.53549 269.621 li
149.661 269.621 li
149.661 299.574 li
0 0 0 0 cmyk
f
.940581 .734279 0 0 cmyk
QYTQWY+Arial-BoldMT [16 0 0 -16 0 0 ]msf
15.434 291.731 mo
(\0006\000W\000D\000J\000H\000\020\000R\000X\000W\000\003\0003\000K\000D\000V\000H)
[10.656 5.32788 8.89599 9.76001 8.896 5.32788 9.76001 9.76002 5.32787 4.43188 10.656 9.76 
8.896 8.896 0 ]xsh
648.52 535.969 mo
539.093 535.969 li
539.093 506.017 li
648.52 506.017 li
648.52 535.969 li
0 0 0 0 cmyk
f
539.093 535.969 mo
517.205 535.969 li
517.205 506.017 li
539.093 506.017 li
539.093 535.969 li
f
.216678 .708095 1 .117647 cmyk
QYTQWY+Arial-BoldMT [16 0 0 -16 0 0 ]msf
524.65 528.127 mo
(\0005\000X\000Q\000Q\000L\000Q\000J\000\003\0003\000K\000D\000V\000H)
[11.552 9.76001 9.76001 9.76001 4.43188 9.76001 9.76001 4.43188 10.656 9.76001 8.896 8.896 
0 ]xsh
grestore
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/QYTQWZ+ArialMT-Identity-H uf
/QYTQWZ+ArialMT /CIDFont ur
/QYTQXA+CourierNew-Bold-Identity-H uf
/QYTQXA+CourierNew-Bold /CIDFont ur
/QYTQWY+Arial-BoldMT-Identity-H uf
/QYTQWY+Arial-BoldMT /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
